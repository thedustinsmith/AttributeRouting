<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.Http.SelfHost</name>
    </assembly>
    <members>
        <member name="T:System.Web.Http.SelfHost.Properties.SRResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.AsyncResultAlreadyEnded">
            <summary>
              Looks up a localized string similar to End cannot be called twice on an AsyncResult..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.AsyncResultCompletedTwice">
            <summary>
              Looks up a localized string similar to The IAsyncResult implementation &apos;{0}&apos; tried to complete a single operation multiple times. This could be caused by an incorrect application IAsyncResult implementation or other extensibility code, such as an IAsyncResult that returns incorrect CompletedSynchronously values or invokes the AsyncCallback multiple times..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.BufferedOutputStreamQuotaExceeded">
            <summary>
              Looks up a localized string similar to The size quota for this stream ({0}) has been exceeded..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.CannotUseOtherClientCredentialTypeWithX509CertificateValidator">
            <summary>
              Looks up a localized string similar to ClientCredentialType must be set to Certificate when a X509CertificateValidator is specified on the HttpSelfHostConfiguration..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.CannotUseOtherClientCredentialTypeWithUserNamePasswordValidator">
            <summary>
              Looks up a localized string similar to ClientCredentialType must be set to Certificate when a UserNamePasswordValidator is specified on the HttpSelfHostConfiguration..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.CertificateUnsupportedForHttpTransportCredentialOnly">
            <summary>
              Looks up a localized string similar to Certificate-based client authentication is not supported in TransportCredentialOnly security mode. Select the Transport security mode..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.ChannelFactoryNotSupported">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type does not support building &apos;{1}&apos; instances..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.ChannelShapeNotSupported">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type does not support the &apos;{1}&apos; channel shape. Implement the &apos;{2}&apos; channel shape to use this type..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.EncoderMessageVersionMismatch">
            <summary>
              Looks up a localized string similar to The message version of the outgoing message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the message..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.HttpMessageEncoderFactoryDoesNotSupportSessionEncoder">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type does not support a session encoder..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.HttpMessageHandlerInvalidMessage">
            <summary>
              Looks up a localized string similar to Could not obtain an HTTP request from message of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.HttpServerAlreadyRunning">
            <summary>
              Looks up a localized string similar to This &apos;{0}&apos; instance has already been started once. To start another instance, please create a new &apos;{0}&apos; object and start that..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.InnerListenerFactoryNotSet">
            <summary>
              Looks up a localized string similar to The inner listener factory of {0} must be set before this operation..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.InvalidAsyncResult">
            <summary>
              Looks up a localized string similar to An incorrect IAsyncResult was provided to an &apos;End&apos; method. The IAsyncResult object passed to &apos;End&apos; must be the one returned from the matching &apos;Begin&apos; or passed to the callback provided to &apos;Begin&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.InvalidAsyncResultImplementation">
            <summary>
              Looks up a localized string similar to An incorrect implementation of the IAsyncResult interface may be returning incorrect values from the CompletedSynchronously property or calling the AsyncCallback more than once. The type {0} could be the incorrect implementation..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.InvalidAsyncResultImplementationGeneric">
            <summary>
              Looks up a localized string similar to An incorrect implementation of the IAsyncResult interface may be returning incorrect values from the CompletedSynchronously property or calling the AsyncCallback more than once..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.InvalidChannelListener">
            <summary>
              Looks up a localized string similar to Error creating &apos;{0}&apos; instance using &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.InvalidNullAsyncResult">
            <summary>
              Looks up a localized string similar to A null value was returned from an async &apos;Begin&apos; method or passed to an AsyncCallback. Async &apos;Begin&apos; implementations must return a non-null IAsyncResult and pass the same IAsyncResult object as the parameter to the AsyncCallback..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageBodyIsHttpRequestMessageWithKnownContentLength">
            <summary>
              Looks up a localized string similar to HTTP request message body with a content length of &apos;{0}&apos; bytes..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageBodyIsHttpRequestMessageWithUnknownContentLength">
            <summary>
              Looks up a localized string similar to HTTP request message body with an undetermined content length..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageBodyIsHttpResponseMessageWithKnownContentLength">
            <summary>
              Looks up a localized string similar to HTTP response message body with a content length of &apos;{0}&apos; bytes..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageBodyIsHttpResponseMessageWithUnknownContentLength">
            <summary>
              Looks up a localized string similar to HTTP response message body with an undetermined content length..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageClosed">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; is closed and can no longer be used..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageInvalidForHttpMessageEncoder">
            <summary>
              Looks up a localized string similar to The response message is not valid for the encoder used by the &apos;{0}&apos; binding, which requires that the response message have been created with the &apos;{1}&apos; extension method on the &apos;{2}&apos; class..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.MessageReadWriteCopyNotSupported">
            <summary>
              Looks up a localized string similar to The message instance does not support being read, written out or copied. Use the &apos;{0}&apos; or &apos;{1}&apos; extension methods on the &apos;{2}&apos; class to access the message content..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.NonHttpMessageMustBeEmpty">
            <summary>
              Looks up a localized string similar to The message instance is non-empty but the &apos;{0}&apos; extension method on the &apos;{1}&apos; class returned null. Message instances that do not support the &apos;{0}&apos; extension method must be empty. .
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.NonnegativeNumberRequired">
            <summary>
              Looks up a localized string similar to Nonnegative number required.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.OnlyMessageVersionNoneSupportedOnHttpMessageEncodingBindingElement">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type supports only MessageVersion.None. .
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.ParameterMustBeLessThanOrEqualSecondParameter">
            <summary>
              Looks up a localized string similar to The value of the &apos;{0}&apos; parameter must be less than or equal to the value of the &apos;{1}&apos; parameter..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.ReadNotSupported">
            <summary>
              Looks up a localized string similar to Read not supported on this stream..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.RequestCancelled">
            <summary>
              Looks up a localized string similar to Processing of the request was cancelled..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.RequestMissingHttpRequestMessageProperty">
            <summary>
              Looks up a localized string similar to The incoming message does not have the required &apos;{0}&apos; property of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.RequestMissingToHeader">
            <summary>
              Looks up a localized string similar to The incoming message does not have the required &apos;To&apos; header..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.SeekNotSupported">
            <summary>
              Looks up a localized string similar to Seek not supported on this stream..
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Properties.SRResources.ValueMustBeNonNegative">
            <summary>
              Looks up a localized string similar to Value must be non-negative..
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSecurityMessageProperty(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the current <see cref="T:System.ServiceModel.Security.SecurityMessageProperty"/> 
            stored in <see cref="M:HttpRequestMessage.Properties"/> for the given request.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.ServiceModel.Security.SecurityMessageProperty"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Error.Format(System.String,System.Object[])">
            <summary>
            Formats the specified resource string using <see cref="M:CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotHttpOrHttpsScheme(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an "http" or "https" URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotAbsolute(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriHasQueryOrFragment(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI 
            without a query or fragment identifier and then logs it with <see cref="F:TraceLevel.Error"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.PropertyNull">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentOutOfRange(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeGreaterThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be greater than or equal to <paramref name="minValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="minValue">The minimum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeLessThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be less than or equal to <paramref name="maxValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="maxValue">The maximum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ObjectDisposed(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> initialized according to guidelines.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> for an invalid enum argument.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.Exception,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="innerException">Inner exception</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.NotSupported(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Properties.CommonWebApiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidAbsoluteUri">
            <summary>
              Looks up a localized string similar to Relative URI values are not supported: &apos;{0}&apos;. The URI must be absolute..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidHttpUriScheme">
            <summary>
              Looks up a localized string similar to Unsupported URI scheme: &apos;{0}&apos;. The URI scheme must be either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentUriHasQueryOrFragment">
            <summary>
              Looks up a localized string similar to URI must not contain a query component or a fragment identifier..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:System.Web.Http.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="T:System.Web.Http.SelfHost.ServiceModel.Channels.AsyncResult.AsyncCompletion">
            <summary>
            Can be utilized by subclasses to write core completion code for both the sync and async paths
            in one location, signalling chainable synchronous completion with the boolean result,
            and leveraging PrepareAsyncCompletion for conversion to an AsyncCallback.
            </summary>
            <remarks>NOTE: requires that "this" is passed in as the state object to the asynchronous sub-call being used with a completion routine.</remarks>
        </member>
        <member name="T:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement">
            <summary>
            Provides an <see cref="T:System.Web.Http.SelfHost.Channels.HttpMessageEncoderFactory"/> that returns a <see cref="T:System.ServiceModel.Channels.MessageEncoder"/> 
            that is able to produce and consume <see cref="T:System.Web.Http.SelfHost.Channels.HttpMessage"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the binding element can build a listener for a specific type of channel.
            </summary>
            <typeparam name="TChannel">The type of channel the listener accepts.</typeparam>
            <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext"/> that provides context for the binding element</param>
            <returns>true if the <see cref="T:System.ServiceModel.Channels.IChannelListener`1"/> of type <see cref="T:System.ServiceModel.Channels.IChannel"/> can be built by the binding element; otherwise, false.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the binding element can build a channel factory for a specific type of channel.
            </summary>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
            <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext"/> that provides context for the binding element</param>
            <returns>ALways false.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the binding element can build a channel factory for a specific type of channel.
            </summary>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
            <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext"/> that provides context for the binding element</param>
            <returns>ALways false.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Initializes a channel listener to accept channels of a specified type from the binding context.
            </summary>
            <typeparam name="TChannel">The type of channel the listener is built to accept.</typeparam>
            <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext"/> that provides context for the binding element</param>
            <returns>The <see cref="T:System.ServiceModel.Channels.IChannelListener`1"/> of type <see cref="T:System.ServiceModel.Channels.IChannel"/> initialized from the context.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.Clone">
            <summary>
            Returns a copy of the binding element object.
            </summary>
            <returns>A <see cref="T:System.ServiceModel.Channels.BindingElement"/> object that is a deep clone of the original.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.CreateMessageEncoderFactory">
            <summary>
            Creates a factory for producing message encoders that are able to 
            produce and consume <see cref="T:System.Web.Http.SelfHost.Channels.HttpMessage"/> instances.
            </summary>
            <returns>
            The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory"/> used to produce message encoders that are able to 
            produce and consume <see cref="T:System.Web.Http.SelfHost.Channels.HttpMessage"/> instances.
            </returns>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.MessageVersion">
            <summary>
            Gets or sets the message version that can be handled by the message encoders produced by the message encoder factory.
            </summary>
            <returns>The <see cref="P:System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement.MessageVersion"/> used by the encoders produced by the message encoder factory.</returns>
        </member>
        <member name="T:System.Web.Http.HttpMethodHelper">
            <summary>
            Various helper methods for the static members of <see cref="T:System.Net.Http.HttpMethod"/>. 
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpMethodHelper.GetHttpMethod(System.String)">
            <summary>
            Gets the static <see cref="T:System.Net.Http.HttpMethod"/> instance for any given HTTP method name.
            </summary>
            <param name="method">The HTTP request method.</param>
            <returns>An existing static <see cref="T:System.Net.Http.HttpMethod"/> or a new instance if the method was not found.</returns>
        </member>
        <member name="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurityModeHelper">
            <summary>
            Internal helper class to validate <see cref="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode"/> enum values.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpBindingSecurityModeHelper.IsDefined(System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode)">
            <summary>
            Determines whether the specified <paramref name="value"/> is defined by the <see cref="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode"/>
            enumeration.
            </summary>
            <param name="value">The value to test.</param>
            <returns><c>true</c> if <paramref name="value"/> is a valid <see cref="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode"/> value; otherwise<c> false</c>.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpBindingSecurityModeHelper.Validate(System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode,System.String)">
            <summary>
            Validates the specified <paramref name="value"/> and throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>
            exception if not valid.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="parameterName">Name of the parameter to use if throwing exception.</param>
        </member>
        <member name="T:System.Web.Http.SelfHost.Channels.HttpMessageExtensions">
            <summary>
            Provides extension methods for getting an <see cref="T:System.Net.Http.HttpRequestMessage"/> instance or
            an <see cref="T:System.Net.Http.HttpResponseMessage"/> instance from a <see cref="T:System.ServiceModel.Channels.Message"/> instance and
            provides extension methods for creating a <see cref="T:System.ServiceModel.Channels.Message"/> instance from either an 
            <see cref="T:System.Net.Http.HttpRequestMessage"/> instance or an 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageExtensions.ToHttpRequestMessage(System.ServiceModel.Channels.Message)">
            <summary>
            Returns a reference to the <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            instance held by the given <see cref="T:System.ServiceModel.Channels.Message"/> or null if the <see cref="T:System.ServiceModel.Channels.Message"/> does not
            hold a reference to an <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            instance.
            </summary>
            <param name="message">The given <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to an 
            <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.
            </param>
            <returns>
            A reference to the <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            instance held by the given <see cref="T:System.ServiceModel.Channels.Message"/> or null if the <see cref="T:System.ServiceModel.Channels.Message"/> does not
            hold a reference to an <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            instance.
            </returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageExtensions.ToHttpResponseMessage(System.ServiceModel.Channels.Message)">
            <summary>
            Returns a reference to the <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance held by the given <see cref="T:System.ServiceModel.Channels.Message"/> or null if the <see cref="T:System.ServiceModel.Channels.Message"/> does not
            hold a reference to an <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance.
            </summary>
            <param name="message">The given <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to an 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </param>
            <returns>
            A reference to the <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance held by the given <see cref="T:System.ServiceModel.Channels.Message"/> or null if the <see cref="T:System.ServiceModel.Channels.Message"/> does not
            hold a reference to an <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance.
            </returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageExtensions.ExtractHttpResponseMessage(System.ServiceModel.Channels.Message)">
            <summary>
            Returns a reference to the <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance held by the given <see cref="T:System.ServiceModel.Channels.Message"/> or null if the <see cref="T:System.ServiceModel.Channels.Message"/> does not
            hold a reference to an <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance.
            </summary>
            <remarks>The caller takes over the ownership of the associated <see cref="T:System.Net.Http.HttpRequestMessage"/> and is responsible for its disposal.</remarks>
            <param name="message">The given <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to an 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </param>
            <returns>
            A reference to the <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance held by the given <see cref="T:System.ServiceModel.Channels.Message"/> or null if the <see cref="T:System.ServiceModel.Channels.Message"/> does not
            hold a reference to an <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance.
            The caller is responsible for disposing any <see cref="T:System.Net.Http.HttpResponseMessage"/> instance returned.
            </returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageExtensions.ToMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Creates a new <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to the given 
            <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            instance to which the new <see cref="T:System.ServiceModel.Channels.Message"/> should hold a reference.
            </param>
            <returns>A <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to the given
            <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.
            </returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpMessageExtensions.ToMessage(System.Net.Http.HttpResponseMessage)">
            <summary>
            Creates a new <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to the given
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            instance to which the new <see cref="T:System.ServiceModel.Channels.Message"/> should hold a reference.
            </param>
            <returns>A <see cref="T:System.ServiceModel.Channels.Message"/> that holds a reference to the given
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.CatchInfo,System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.CatchInfo{``0},System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task{``0}}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            Since this method consumes a task with no return value, you must provide the return value to be used
            when the inner task ran to successful completion.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject(System.Threading.Tasks.Task)">
            <summary>
            Cast Task to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Cast Task of T to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastFromObject``1(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Cast Task of object to Task of T
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally(System.Threading.Tasks.Task,System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.MarkExceptionsObserved(System.Threading.Tasks.Task)">
            <summary>
            Marks a Task as "exception observed". The Task is required to have been completed first.
            </summary>
            <remarks>
            Useful for 'finally' clauses, as if the 'finally' action throws we'll propagate the new
            exception and lose track of the inner exception.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Action,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Throws the first faulting exception for a task which is faulted. It attempts to preserve the original
            stack trace when throwing the exception (which should always work in 4.5, and should also work in 4.0
            when running in full trust). Note: It is the caller's responsibility not to pass incomplete tasks to
            this method, because it does degenerate into a call to the equivalent of .Wait() on the task when it
            hasn't yet completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToAsyncVoidTask(System.Action)">
            <summary>
            Adapts any action into a Task (returning AsyncVoid, so that it's usable with Task{T} extension methods).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToTask``1(System.Threading.Tasks.Task,System.Threading.CancellationToken,``0)">
            <summary>
            Changes the return value of a task to the given result, if the task ends in the RanToCompletion state.
            This potentially imposes an extra ContinueWith to convert a non-completed task, so use this with caution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.TryGetResult``1(System.Threading.Tasks.Task{``0},``0@)">
            <summary>
            Attempts to get the result value for the given task. If the task ran to completion, then
            it will return true and set the result value; otherwise, it will return false.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpersExtensions.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfoBase`1.Throw">
            <summary>
            Returns a CatchResult that re-throws the original exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.Exception">
            <summary>
            The exception that was thrown to cause the Catch block to execute.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.CatchInfoBase`1.CatchResult">
            <summary>
            Represents a result to be returned from a Catch handler.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.CatchResult.Task">
            <summary>
            Gets or sets the task to be returned to the caller.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Handled">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Task(System.Threading.Tasks.Task)">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Handled(`0)">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
            <param name="returnValue">The return value of the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Task(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="T:System.Web.Http.SelfHost.Channels.HttpBinding">
            <summary>
            A binding used with endpoints for web services that use strongly-type HTTP request 
            and response messages.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpBinding.#ctor(System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> class with the 
            type of security used by the binding explicitly specified.
            </summary>
            <param name="securityMode">The value of <see cref="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode"/> that 
            specifies the type of security that is used to configure a service endpoint using the
            <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> binding.
            </param>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpBinding.CreateBindingElements">
            <summary>
            Returns an ordered collection of binding elements contained in the current binding. 
            (Overrides <see cref="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
            Binding.CreateBindingElements</see>.)
            </summary>
            <returns>
            An ordered collection of binding elements contained in the current binding.
            </returns>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.EnvelopeVersion">
            <summary>
            Gets the envelope version that is used by endpoints that are configured to use an 
            <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> binding.  Always returns <see cref="P:System.ServiceModel.EnvelopeVersion.None"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.HostNameComparisonMode">
            <summary>
            Gets or sets a value that indicates whether the hostname is used to reach the 
            service when matching the URI.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum amount of memory allocated for the buffer manager that manages the buffers 
            required by endpoints that use this binding.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.MaxBufferSize">
            <summary>
            Gets or sets the maximum amount of memory that is allocated for use by the manager of the message 
            buffers that receive messages from the channel.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.MaxReceivedMessageSize">
            <summary>
            Gets or sets the maximum size for a message that can be processed by the binding.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.ConfigureTransportBindingElement">
            <summary>
            Gets or sets the delegate which can configure the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement"/> that this binding creates.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.Scheme">
            <summary>
            Gets the URI transport scheme for the channels and listeners that are configured 
            with this binding. (Overrides <see cref="P:System.ServiceModel.Channels.Binding.Scheme">
            Binding.Scheme</see>.)
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.Security">
            <summary>
            Gets or sets the security settings used with this binding. 
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.TransferMode">
            <summary>
            Gets or sets a value that indicates whether the service configured with the 
            binding uses streamed or buffered (or both) modes of message transfer.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
            <summary>
            Gets a value indicating whether incoming requests can be handled more efficiently synchronously or asynchronously.
            </summary>
        </member>
        <member name="T:System.Web.Http.SelfHost.HttpSelfHostServer">
            <summary>
            Implementation of an <see cref="T:System.Web.Http.HttpServer"/> which listens directly to HTTP.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.#ctor(System.Web.Http.SelfHost.HttpSelfHostConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.HttpSelfHostServer"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.#ctor(System.Web.Http.SelfHost.HttpSelfHostConfiguration,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.HttpSelfHostServer"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.InitializeCallbacks">
            <summary>
            Initialize async callbacks.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.OpenAsync">
            <summary>
            Opens the current <see cref="T:System.Web.Http.HttpServer"/> instance.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous <see cref="T:System.Web.Http.HttpServer"/> open operation. Once this task completes successfully the server is running.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.CloseAsync">
            <summary>
            Closes the current <see cref="T:System.Web.Http.HttpServer"/> instance.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous <see cref="T:System.Web.Http.HttpServer"/> close operation.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged SRResources.</param>
        </member>
        <member name="T:System.Web.Http.SelfHost.HttpSelfHostServer.ChannelContext">
            <summary>
            Provides context for receiving an <see cref="T:System.ServiceModel.Channels.RequestContext"/> instance asynchronously.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.ChannelContext.#ctor(System.Web.Http.SelfHost.HttpSelfHostServer,System.ServiceModel.Channels.IReplyChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.HttpSelfHostServer.ChannelContext"/> class.
            </summary>
            <param name="server">The host to associate with this context.</param>
            <param name="channel">The channel to associate with this channel.</param>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostServer.ChannelContext.Server">
            <summary>
            Gets the <see cref="T:System.Web.Http.SelfHost.HttpSelfHostServer"/> instance.
            </summary>
            <value>
            The <see cref="T:System.Web.Http.SelfHost.HttpSelfHostServer"/> instance.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostServer.ChannelContext.Channel">
            <summary>
            Gets the <see cref="T:System.ServiceModel.Channels.IReplyChannel"/> instance.
            </summary>
            <value>
            The <see cref="T:System.ServiceModel.Channels.RequestContext"/> instance.
            </value>
        </member>
        <member name="T:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext">
            <summary>
            Provides context for sending a <see cref="T:System.ServiceModel.Channels.Message"/> instance asynchronously in response
            to a request.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.#ctor(System.Web.Http.SelfHost.HttpSelfHostServer.ChannelContext,System.ServiceModel.Channels.RequestContext,System.ServiceModel.Channels.Message)">
            <summary>
            Initializes a new instance of the <see cref="P:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.ChannelContext"/> class.
            </summary>
            <param name="channelContext">The channel context to associate with this reply context.</param>
            <param name="requestContext">The request context to associate with this reply context.</param>
            <param name="reply">The reply to associate with this reply context.</param>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged SRResources.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged SRResources.</param>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.ChannelContext">
            <summary>
            Gets the <see cref="P:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.ChannelContext"/> instance.
            </summary>
            <value>
            The <see cref="P:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.ChannelContext"/> instance.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.RequestContext">
            <summary>
            Gets the <see cref="T:System.ServiceModel.Channels.RequestContext"/> instance.
            </summary>
            <value>
            The <see cref="T:System.ServiceModel.Channels.RequestContext"/> instance.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostServer.ReplyContext.Reply">
            <summary>
            Gets the reply <see cref="T:System.ServiceModel.Channels.Message"/> instance.
            </summary>
            <value>
            The reply <see cref="T:System.ServiceModel.Channels.Message"/> instance.
            </value>
        </member>
        <member name="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurity">
            <summary>
            Specifies the types of security available to a service endpoint configured to use an
            <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> binding.
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.Channels.HttpBindingSecurity.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurity"/> class.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBindingSecurity.Mode">
            <summary>
            Gets or sets the mode of security that is used by an endpoint configured to use an
            <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> binding.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.Channels.HttpBindingSecurity.Transport">
            <summary>
            Gets or sets an object that contains the transport-level security settings for the 
            <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> binding.
            </summary>
        </member>
        <member name="T:System.Web.Http.SelfHost.HttpSelfHostConfiguration">
            <summary>
            The configuration class for Http Services
            </summary>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.HttpSelfHostConfiguration"/> class.
            </summary>
            <param name="baseAddress">The base address.</param>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostConfiguration.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.SelfHost.HttpSelfHostConfiguration"/> class.
            </summary>
            <param name="baseAddress">The base address.</param>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostConfiguration.ConfigureBinding(System.Web.Http.SelfHost.Channels.HttpBinding)">
            <summary>
            Internal method called to configure <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/> settings.
            </summary>
            <param name="httpBinding">Http binding.</param>
            <returns>The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection"/> to use when building the <see cref="T:System.ServiceModel.Channels.IChannelListener"/> or null if no binding parameters are present.</returns>
        </member>
        <member name="M:System.Web.Http.SelfHost.HttpSelfHostConfiguration.OnConfigureBinding(System.Web.Http.SelfHost.Channels.HttpBinding)">
            <summary>
            Called to apply the configuration on the endpoint level.
            </summary>
            <param name="httpBinding">Http endpoint.</param>
            <returns>The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection"/> to use when building the <see cref="T:System.ServiceModel.Channels.IChannelListener"/> or null if no binding parameters are present.</returns>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.BaseAddress">
            <summary>
            Gets the base address.
            </summary>
            <value>
            The base address.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.MaxConcurrentRequests">
            <summary>
            Gets or sets the upper limit of how many concurrent <see cref="T:System.Net.Http.HttpRequestMessage"/> instances 
            can be processed at any given time. The default is 100 times the number of CPU cores.
            </summary>
            <value>
            The maximum concurrent <see cref="T:System.Net.Http.HttpRequestMessage"/> instances processed at any given time.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.TransferMode">
            <summary>
            Gets or sets the transfer mode.
            </summary>
            <value>
            The transfer mode.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.HostNameComparisonMode">
            <summary>
            Specifies how the host name should be used in URI comparisons when dispatching an incoming message.
            </summary>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.MaxBufferSize">
            <summary>
            Gets or sets the size of the max buffer.
            </summary>
            <value>
            The size of the max buffer.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.MaxReceivedMessageSize">
            <summary>
            Gets or sets the size of the max received message.
            </summary>
            <value>
            The size of the max received message.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.ReceiveTimeout">
            <summary>
            Gets or sets the interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped.
            </summary>
            <value>
            The interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.
            </summary>
            <value>
            The interval of time provided for a write operation to complete before the transport raises an exception.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.UserNamePasswordValidator">
            <summary>
            Gets or sets UserNamePasswordValidator so that it can be used to validate the username and password
            sent over HTTP or HTTPS
            </summary>
            <value>
            The server certificate.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.X509CertificateValidator">
            <summary>
            Gets or sets X509CertificateValidator so that it can be used to validate the client certificate
            sent over HTTPS
            </summary>
            <value>
            The server certificate.
            </value>
        </member>
        <member name="P:System.Web.Http.SelfHost.HttpSelfHostConfiguration.ClientCredentialType">
            <summary>
            Gets/Sets the ClientCredentialType that server is expecting. 
            </summary>
            <value>
            The default value is HttpClientCredentialType.None.
            </value>
        </member>
        <member name="T:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode">
            <summary>
            Defines the modes of security that can be used to configure a service endpoint that uses the
            <see cref="T:System.Web.Http.SelfHost.Channels.HttpBinding"/>.
            </summary>
        </member>
        <member name="F:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode.None">
            <summary>
            Indicates no security is used with HTTP requests.
            </summary>
        </member>
        <member name="F:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode.Transport">
            <summary>
            Indicates that transport-level security is used with HTTP requests.
            </summary>
        </member>
        <member name="F:System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode.TransportCredentialOnly">
            <summary>
            Indicates that only HTTP-based client authentication is provided.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors``1(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromResult``1(``0)">
            <summary>
            Returns a successful completed task with the given result.  
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Iterate(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Return a task that runs all the tasks inside the iterator sequentially. It stops as soon
            as one of the tasks fails or cancels, or after all the tasks have run succesfully.
            </summary>
            <param name="asyncIterator">collection of tasks to wait on</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="disposeEnumerator">whether or not to dispose the enumerator we get from <paramref name="asyncIterator"/>.
            Only set to <c>false</c> if you can guarantee that <paramref name="asyncIterator"/>'s enumerator does not have any resources it needs to dispose.</param>
            <returns>a task that signals completed when all the incoming tasks are finished.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImpl(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Provides the implementation of the Iterate method.
            Contains special logic to help speed up common cases.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImplIncompleteTask(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Fallback for IterateImpl when the antecedent Task isn't yet complete.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously(System.Action,System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <param name="action">action to run synchronouslyt</param>
            <param name="token">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <typeparam name="TResult">type of result that task will return.</typeparam>
            <param name="func">function to run synchronously and produce result</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Overload of RunSynchronously that avoids a call to Unwrap(). 
            This overload is useful when func() starts doing some synchronous work and then hits IO and 
            needs to create a task to finish the work. 
            </summary>
            <typeparam name="TResult">type of result that Task will return</typeparam>
            <param name="func">function that returns a task</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task, created by running func().</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.SetIfTaskFailed``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Update the completion source if the task failed (cancelled or faulted). No change to completion source if the task succeeded. 
            </summary>
            <typeparam name="TResult">result type of completion source</typeparam>
            <param name="tcs">completion source to update</param>
            <param name="source">task to update from.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task. If the task ran to completion and the result type doesn't match
            the type of the completion source, then a default value will be used. This is useful for converting Task into
            Task{AsyncVoid}, but it can also accidentally be used to introduce data loss (by passing the wrong
            task type), so please execute this method with care.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
    </members>
</doc>
