<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.Http.WebHost</name>
    </assembly>
    <members>
        <member name="T:System.Web.Http.WebHost.HttpControllerTypeCacheSerializer">
            <summary>
            Manages serializing and deserializing the cache managed by <see cref="T:System.Web.Http.Dispatcher.HttpControllerTypeCache"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.Properties.SRResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.ProcessRequestNotSupported">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; class only supports asynchronous processing of HTTP requests..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RouteCollectionNotSupported">
            <summary>
              Looks up a localized string similar to This operation is not supported by &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RouteCollectionOutOfRange">
            <summary>
              Looks up a localized string similar to The index cannot be less than 0 or equal to or larger than the number of items in the collection..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RouteCollectionUseDirectly">
            <summary>
              Looks up a localized string similar to This operation is only supported by directly calling it on &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Serialize_Response_Failed">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type failed to serialize the response body..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Serialize_Response_Failed_MediaType">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type failed to serialize the response body for content type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.TypeCache_DoNotModify">
            <summary>
              Looks up a localized string similar to This file is automatically generated. Please do not modify the contents of this file..
            </summary>
        </member>
        <member name="T:System.Web.Http.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Error.Format(System.String,System.Object[])">
            <summary>
            Formats the specified resource string using <see cref="M:CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotHttpOrHttpsScheme(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an "http" or "https" URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotAbsolute(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriHasQueryOrFragment(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI 
            without a query or fragment identifier and then logs it with <see cref="F:TraceLevel.Error"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.PropertyNull">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentOutOfRange(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeGreaterThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be greater than or equal to <paramref name="minValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="minValue">The minimum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeLessThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be less than or equal to <paramref name="maxValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="maxValue">The maximum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ObjectDisposed(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> initialized according to guidelines.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> for an invalid enum argument.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.Exception,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="innerException">Inner exception</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.NotSupported(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Properties.CommonWebApiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidAbsoluteUri">
            <summary>
              Looks up a localized string similar to Relative URI values are not supported: &apos;{0}&apos;. The URI must be absolute..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidHttpUriScheme">
            <summary>
              Looks up a localized string similar to Unsupported URI scheme: &apos;{0}&apos;. The URI scheme must be either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentUriHasQueryOrFragment">
            <summary>
              Looks up a localized string similar to URI must not contain a query component or a fragment identifier..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.VirtualPathRoot">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule">
            <summary>
            Recovers the response status code to 401 if it was altered by <see cref="T:System.Web.Security.FormsAuthenticationModule"/>.
            This module autoregisters on .NET 4.0, which ensures it runs after <see cref="T:System.Web.Security.FormsAuthenticationModule"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.AllowAuthenticationRedirect(System.Web.HttpContextBase)">
            <summary>
            Enables authentication redirects.
            </summary>
            <param name="httpContextBase">The HTTP context.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.DisableAuthenticationRedirect(System.Web.HttpContextBase)">
            <summary>
            Disables authentication redirects.
            </summary>
            <param name="httpContextBase">The HTTP context.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.Register">
            <summary>
            Registers the module if necessary.
            </summary>
            <remarks>
            We do not want the module to be registered if:
            - Running on .NET 4.5 because there is a standard way to prevent the redirection
            - The behavior is explicitly disabled using the appSettings flag
            - The module <see cref="T:System.Web.Security.FormsAuthenticationModule"/> is not enabled
            </remarks>
        </member>
        <member name="M:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.GetEnabled(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns whether the module is explicitly enabled or not
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.IDisableRedirect">
            <summary>
            Abstract the properties needed by <see cref="T:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule"/> for unit testing purposes.
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.HttpApplicationDisableRedirect">
            <summary>
            Wrapper implementation of <see cref="T:System.Web.Http.WebHost.SuppressFormsAuthRedirectModule.IDisableRedirect"/> for <see cref="T:System.Web.HttpApplication"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostHttpControllerTypeResolver">
            <summary>
            Wraps ASP build manager
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of controllers.</returns>
        </member>
        <member name="T:System.Web.Http.HttpMethodHelper">
            <summary>
            Various helper methods for the static members of <see cref="T:System.Net.Http.HttpMethod"/>. 
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpMethodHelper.GetHttpMethod(System.String)">
            <summary>
            Gets the static <see cref="T:System.Net.Http.HttpMethod"/> instance for any given HTTP method name.
            </summary>
            <param name="method">The HTTP request method.</param>
            <returns>An existing static <see cref="T:System.Net.Http.HttpMethod"/> or a new instance if the method was not found.</returns>
        </member>
        <member name="T:System.Web.Http.RouteCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Routing.RouteCollection"/>
            </summary>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
            <summary>
            Maps the specified route template.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
            <summary>
            Maps the specified route template and sets default constraints, and namespaces.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
            <summary>
            Maps the specified route template and sets default route values, constraints, and namespaces.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
            <summary>
            Maps the specified route template and sets default route values, constraints, namespaces, and end-point message handler.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <param name="handler">The handler to which the request will be dispatched.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.Routing.HttpWebRoute">
            <summary>
            Mimics the System.Web.Routing.Route class to work better for Web API scenarios. The only
            difference between the base class and this class is that this one will match only when
            a special "httproute" key is specified when generating URLs. There is no special behavior
            for incoming URLs.
            </summary>
        </member>
        <member name="F:System.Web.Http.WebHost.Routing.HttpWebRoute.HttpRouteKey">
            <summary>
            Key used to signify that a route URL generation request should include HTTP routes (e.g. Web API).
            If this key is not specified then no HTTP routes will match.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HttpWebRoute.HttpRoute">
            <summary>
            Gets the <see cref="T:System.Web.Http.Routing.IHttpRoute"/> associated with this <see cref="T:System.Web.Http.WebHost.Routing.HttpWebRoute"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.GlobalConfiguration">
            <summary>
            Provides a global <see cref="T:System.Web.Http.HttpConfiguration"/> for ASP.NET applications.
            </summary>
        </member>
        <member name="P:System.Web.Http.GlobalConfiguration.Configuration">
            <summary>
            Gets the global <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.GlobalConfiguration.DefaultHandler">
            <summary>
            Gets the default message handler that will be called for all requests.
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.HttpControllerRouteHandler">
            <summary>
            A <see cref="T:System.Web.Routing.IRouteHandler"/> that returns instances of <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/> that
            can pass requests to a given <see cref="T:System.Web.Http.HttpServer"/> instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the object that processes the request.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>
            An object that processes the request.
            </returns>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the object that processes the request.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>
            An object that processes the request.
            </returns>
        </member>
        <member name="P:System.Web.Http.WebHost.HttpControllerRouteHandler.Instance">
            <summary>
            Gets the singleton <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler"/> instance.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.CatchInfo,System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.CatchInfo{``0},System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task{``0}}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            Since this method consumes a task with no return value, you must provide the return value to be used
            when the inner task ran to successful completion.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject(System.Threading.Tasks.Task)">
            <summary>
            Cast Task to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Cast Task of T to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastFromObject``1(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Cast Task of object to Task of T
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally(System.Threading.Tasks.Task,System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.MarkExceptionsObserved(System.Threading.Tasks.Task)">
            <summary>
            Marks a Task as "exception observed". The Task is required to have been completed first.
            </summary>
            <remarks>
            Useful for 'finally' clauses, as if the 'finally' action throws we'll propagate the new
            exception and lose track of the inner exception.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Action,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Throws the first faulting exception for a task which is faulted. It attempts to preserve the original
            stack trace when throwing the exception (which should always work in 4.5, and should also work in 4.0
            when running in full trust). Note: It is the caller's responsibility not to pass incomplete tasks to
            this method, because it does degenerate into a call to the equivalent of .Wait() on the task when it
            hasn't yet completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToAsyncVoidTask(System.Action)">
            <summary>
            Adapts any action into a Task (returning AsyncVoid, so that it's usable with Task{T} extension methods).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToTask``1(System.Threading.Tasks.Task,System.Threading.CancellationToken,``0)">
            <summary>
            Changes the return value of a task to the given result, if the task ends in the RanToCompletion state.
            This potentially imposes an extra ContinueWith to convert a non-completed task, so use this with caution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.TryGetResult``1(System.Threading.Tasks.Task{``0},``0@)">
            <summary>
            Attempts to get the result value for the given task. If the task ran to completion, then
            it will return true and set the result value; otherwise, it will return false.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpersExtensions.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfoBase`1.Throw">
            <summary>
            Returns a CatchResult that re-throws the original exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.Exception">
            <summary>
            The exception that was thrown to cause the Catch block to execute.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.CatchInfoBase`1.CatchResult">
            <summary>
            Represents a result to be returned from a Catch handler.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.CatchResult.Task">
            <summary>
            Gets or sets the task to be returned to the caller.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Handled">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Task(System.Threading.Tasks.Task)">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Handled(`0)">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
            <param name="returnValue">The return value of the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Task(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostBufferPolicySelector">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector"/> suited for use
            in an ASP.NET environment which provides direct support for input and output buffering.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
            <summary>
            Determines whether the host should buffer the entity body when processing a request with content.
            </summary>
            <param name="hostContext">The host-specific context.  In this case, it is an instance
            of <see cref="T:System.Web.HttpContextBase"/>.</param>
            <returns><c>true</c> if buffering should be used; otherwise a streamed request should be used.</returns>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
            <summary>
            Determines whether the host should buffer the <see cref="T:System.Net.Http.HttpResponseMessage"/> entity body.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/>response for which to determine
            whether host output buffering should be used for the response entity body.</param>
            <returns><c>true</c> if buffering should be used; otherwise a streamed response should be used.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.HttpControllerHandler">
            <summary>
            A <see cref="T:System.Web.IHttpAsyncHandler"/> that passes ASP.NET requests into the <see cref="T:System.Web.Http.HttpServer"/>
            pipeline and write the result back.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.#ctor(System.Web.Routing.RouteData)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/> class.
            </summary>
            <param name="routeData">The route data.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="httpContext">The HTTP context base.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing the request.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that contains information about the status of the process. </returns>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
            <summary>
            Provides an asynchronous process End method when the process ends.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that contains information about the status of the process.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Processes the request.
            </summary>
            <param name="httpContextBase">The HTTP context base.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process request.
            </summary>
            <param name="httpContextBase">The HTTP context base.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that contains information about the status of the process. </returns>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.EndProcessRequest(System.IAsyncResult)">
            <summary>
            Provides an asynchronous process End method when the process ends.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that contains information about the status of the process.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.ConvertResponse(System.Web.HttpContextBase,System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage)">
            <summary>
            Converts a <see cref="T:System.Net.Http.HttpResponseMessage"/> to an <see cref="T:System.Web.HttpResponseBase"/> and disposes the 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> and <see cref="T:System.Net.Http.HttpRequestMessage"/> upon completion.
            </summary>
            <param name="httpContextBase">The HTTP context base.</param>
            <param name="response">The response to convert.</param>
            <param name="request">The request (which will be disposed).</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the conversion of an <see cref="T:System.Net.Http.HttpResponseMessage"/> to an <see cref="T:System.Web.HttpResponseBase"/>
            including writing out any entity body.</returns>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.EnsureSuppressFormsAuthenticationRedirect(System.Web.HttpContextBase)">
            <summary>
            Prevents the <see cref="T:System.Web.Security.FormsAuthenticationModule"/> from altering a 401 response to 302 by 
            setting <see cref="P:System.Web.HttpResponseBase.SuppressFormsAuthenticationRedirect" /> to <c>true</c> if available.
            </summary>
            <param name="httpContextBase">The HTTP context base.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.WriteResponseContentAsync(System.Web.HttpContextBase,System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage)">
            <summary>
            Asynchronously writes the response content to the ASP.NET output stream
            and sets the content headers.
            </summary>
            <remarks>
            This method returns only non-faulted tasks.  Any error encountered
            writing the response will be handled within the task returned by this method.
            </remarks>
            <param name="httpContextBase">The context base.</param>
            <param name="response">The response being written.</param>
            <param name="request">The original request.</param>
            <returns>The task that will write the response content.</returns>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.CreateErrorResponseAsync(System.Web.HttpContextBase,System.Net.Http.HttpContent,System.Net.Http.HttpRequestMessage,System.Exception)">
            <summary>
            Asynchronously creates an error response.
            </summary>
            <remarks>
            This method returns a task that will set the headers and status code appropriately
            for an error response.  If possible, it will also write the exception as an
            <see cref="T:System.Web.Http.HttpError"/> into the response body.
            <para>
            Any errors during the creation of the error response itself will be handled
            internally.  The task returned from this method will not show as faulted.
            </para>
            </remarks>
            <param name="httpContextBase">The HTTP context.</param>
            <param name="responseContent">The original response content we could not write.</param>
            <param name="request">The original request.</param>
            <param name="exception">The exception caught attempting to write <paramref name="responseContent"/>.</param>
            <returns>A task that will create the error response.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.HttpControllerHandler.System#Web#IHttpHandler#IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.HttpControllerHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostAssembliesResolver">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver"/> using <see cref="T:System.Web.Compilation.BuildManager"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostAssembliesResolver.System#Web#Http#Dispatcher#IAssembliesResolver#GetAssemblies">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of controllers.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.TaskWrapperAsyncResult">
            <summary>
            Wraps a <see cref="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.Task"/>, optionally overriding the State object (since the Task Asynchronous Pattern doesn't normally use it).
            </summary>
            <remarks>Class copied from System.Web.Mvc, but with modifications</remarks>
        </member>
        <member name="M:System.Web.Http.WebHost.TaskWrapperAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.TaskWrapperAsyncResult"/> class.
            </summary>
            <param name="task">The <see cref="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.Task"/> to wrap.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value indicating whether the asynchronous operation completed synchronously.
            </summary>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.IsCompleted">
            <summary>
            Gets a value indicating whether the asynchronous operation has completed.
            </summary>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors``1(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromResult``1(``0)">
            <summary>
            Returns a successful completed task with the given result.  
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Iterate(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Return a task that runs all the tasks inside the iterator sequentially. It stops as soon
            as one of the tasks fails or cancels, or after all the tasks have run succesfully.
            </summary>
            <param name="asyncIterator">collection of tasks to wait on</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="disposeEnumerator">whether or not to dispose the enumerator we get from <paramref name="asyncIterator"/>.
            Only set to <c>false</c> if you can guarantee that <paramref name="asyncIterator"/>'s enumerator does not have any resources it needs to dispose.</param>
            <returns>a task that signals completed when all the incoming tasks are finished.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImpl(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Provides the implementation of the Iterate method.
            Contains special logic to help speed up common cases.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImplIncompleteTask(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Fallback for IterateImpl when the antecedent Task isn't yet complete.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously(System.Action,System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <param name="action">action to run synchronouslyt</param>
            <param name="token">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <typeparam name="TResult">type of result that task will return.</typeparam>
            <param name="func">function to run synchronously and produce result</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Overload of RunSynchronously that avoids a call to Unwrap(). 
            This overload is useful when func() starts doing some synchronous work and then hits IO and 
            needs to create a task to finish the work. 
            </summary>
            <typeparam name="TResult">type of result that Task will return</typeparam>
            <param name="func">function that returns a task</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task, created by running func().</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.SetIfTaskFailed``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Update the completion source if the task failed (cancelled or faulted). No change to completion source if the task succeeded. 
            </summary>
            <typeparam name="TResult">result type of completion source</typeparam>
            <param name="tcs">completion source to update</param>
            <param name="source">task to update from.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task. If the task ran to completion and the result type doesn't match
            the type of the completion source, then a default value will be used. This is useful for converting Task into
            Task{AsyncVoid}, but it can also accidentally be used to introduce data loss (by passing the wrong
            task type), so please execute this method with care.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
    </members>
</doc>
