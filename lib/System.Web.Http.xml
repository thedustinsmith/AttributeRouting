<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.Http</name>
    </assembly>
    <members>
        <member name="T:System.Web.Http.HttpConfiguration">
            <summary>
            Configuration of <see cref="T:System.Web.Http.HttpServer"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpConfiguration"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpConfiguration"/> class.
            </summary>
            <param name="routes">The <see cref="T:System.Web.Http.HttpRouteCollection"/> to associate with this instance.</param>
        </member>
        <member name="M:System.Web.Http.HttpConfiguration.RegisterForDispose(System.IDisposable)">
            <summary>
            Adds the given <paramref name="resource"/> to a list of resources that will be disposed once the configuration is disposed.
            </summary>
            <param name="resource">The resource to dispose. Can be <c>null</c>.</param>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Initializer">
            <summary>
            Gets or sets the action that will perform final initialization
            of the <see cref="T:System.Web.Http.HttpConfiguration"/> instance before it is used
            to process requests.
            </summary>
            <remarks>The Action returned by this property will be called to perform
            final initialization of an <see cref="T:System.Web.Http.HttpConfiguration"/> before it is
            used to process a request.
            <para>
            The <see cref="T:System.Web.Http.HttpConfiguration"/> passed to this action should be
            considered immutable after the action returns.
            </para>
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Filters">
            <summary>
            Gets the list of filters that apply to all requests served using this HttpConfiguration instance.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
            <summary>
            Gets an ordered list of <see cref="T:System.Net.Http.DelegatingHandler"/> instances to be invoked as an
            <see cref="T:System.Net.Http.HttpRequestMessage"/> travels up the stack and an <see cref="T:System.Net.Http.HttpResponseMessage"/> travels down in
            stack in return. The handlers are invoked in a top-down fashion in the incoming path and bottom-up in the outgoing 
            path. That is, the first entry is invoked first for an incoming request message but last for an outgoing 
            response message.
            </summary>
            <value>
            The message handler collection.
            </value>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Routes">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpRouteCollection"/> associated with this <see cref="T:System.Web.Http.HttpServer"/> instance.
            </summary>
            <value>
            The <see cref="T:System.Web.Http.HttpRouteCollection"/>.
            </value>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
            <summary>
            Gets the root virtual path. The <see cref="P:System.Web.Http.HttpConfiguration.VirtualPathRoot"/> property always returns 
            "/" as the first character of the returned value.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.DependencyResolver">
            <summary>
            Gets or sets the dependency resolver associated with this <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Services">
            <summary>
            Gets the container of default services associated with this <see cref="T:System.Web.Http.HttpConfiguration"/>.
            Only supports the list of service types documented on <see cref="T:System.Web.Http.Services.DefaultServices"/>. For general
            purpose types, please use <see cref="P:System.Web.Http.HttpConfiguration.DependencyResolver"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.ParameterBindingRules">
            <summary>
            Top level hook for how parameters should be bound. 
            This should be respected by the IActionValueBinder. If a parameter is not claimed by the list, the IActionValueBinder still binds it. 
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
            <summary>
            Gets or sets a value indicating whether error details should be included in error messages.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Formatters">
            <summary>
            Gets the media type formatters.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
            <summary>
            Specify this parameter uses a model binder. This can optionally specify the specific model binder and 
            value providers that drive that model binder. 
            Derived attributes may provide convenience settings for the model binder or value provider. 
            </summary>
        </member>
        <member name="T:System.Web.Http.ParameterBindingAttribute">
            <summary>
            Attribute on a parameter or type that produces a <see cref="T:System.Web.Http.Controllers.HttpParameterBinding"/>. 
            If the attribute is on a type-declaration, then it's as if that attribute is present on all action parameters 
            of that type.
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinder(System.Web.Http.HttpConfiguration,System.Type)">
            <summary>
            Get the IModelBinder for this type.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="modelType">model type that the binder is expected to bind.</param>
            <returns>
            a non-null model binder.
            </returns>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
            <summary>
            Value providers that will be fed to the model binder.
            </summary>
        </member>
        <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
            <summary>
            Sets the type of the model binder. 
            This type must be a subclass of <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider"/>  or <see cref="T:System.Web.Http.ModelBinding.IModelBinder"/>      
            If null, uses the default from the configuration. 
            </summary>   
        </member>
        <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
            <summary>
            Gets or sets the name to consider as the parameter name during model binding
            </summary>
        </member>
        <member name="T:System.Web.Http.FromBodyAttribute">
            <summary>
            This attribute is used on action parameters to indicate
            they come only from the content body of the incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider">
            <summary>
            An implementation of <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> which provides validators that throw exceptions when the model is invalid.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerSelectorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
            <summary>
            Defines the methods that are required for an <see cref="T:System.Web.Http.Controllers.IHttpController"/> factory.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
            <summary>
            Selects a <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> for the given <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The request message.</param>
            <returns>An <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instance.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
            <summary>
            Returns a map, keyed by controller string, of all <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> that the selector can select. 
            This is primarily called by <see cref="T:System.Web.Http.Description.IApiExplorer"/> to discover all the possible controllers in the system.
            </summary>
            <returns>A map of all <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> that the selector can select, or null if the selector does not have a well-defined mapping of <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ActionValueBinderTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IActionValueBinder"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ActionFilterTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.IActionFilter"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.FilterTracer">
            <summary>
            Base class and helper for the creation of filter tracers.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
            <summary>
            Describes how a parameter is bound. The binding should be static (based purely on the descriptor) and 
            can be shared across requests. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
            <summary>
            Execute the binding for the given request.
            On success, this will add the parameter to the actionContext.ActionArguments dictionary.
            Caller ensures <see cref="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid"/> is true.
            </summary>
            <param name="metadataProvider">metadata provider to use for validation.</param>
            <param name="actionContext">action context for the binding. This contains the parameter dictionary that will get populated.</param>
            <param name="cancellationToken">Cancellation token for cancelling the binding operation. Or a binder can also bind a parameter to this.</param>
            <returns>Task that is signaled when the binding is complete. For simple bindings from a URI, this should be signalled immediately.
            For bindings that read the content body, this may do network IO.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpParameterBinding.GetValue(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Helper to get the parameter value from the action context's argument dictionary
            </summary>
            <param name="actionContext">action context </param>
            <returns>the value for this parameter in the given action context, or null if the parameter has not yet been set.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpParameterBinding.SetValue(System.Web.Http.Controllers.HttpActionContext,System.Object)">
            <summary>
            Helper to set the result of this parameter binding in the action context's argument dictionary. 
            </summary>
            <param name="actionContext">action context.</param>
            <param name="value">parameter value.</param>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
            <summary>
            True iff this binding owns the body. This is important since the body can be a stream that is only read once.
            This lets us know who is trying to read the body, and enforce that there is only one reader. 
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
            <summary>
            True if the binding was successful and ExecuteBinding can be called. 
            False if there was an error determining this binding. This means a developer error somewhere, such as 
            configuration, parameter types, proper attributes, etc. 
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
            <summary>
            Get an error message describing why this binding is invalid. 
            </summary>
        </member>
        <member name="T:System.Web.Http.Internal.TypeHelper">
            <summary>
            A static class that provides various <see cref="T:System.Type"/> related helpers.
            </summary>
        </member>
        <member name="M:System.Web.Http.Internal.TypeHelper.OfType``1(System.Object[])">
            <summary>
            Fast implementation to get the subset of a given type.
            </summary>
            <typeparam name="T">type to search for</typeparam>
            <returns>subset of objects that can be assigned to T</returns>
        </member>
        <member name="P:System.Web.Http.Routing.UrlHelper.Request">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpRequestMessage"/> of the current <see cref="T:System.Web.Http.Routing.UrlHelper"/>.
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
            <summary>
            Describe a binding error.  This includes a message that can give meaningful information to a client.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver"/> with no external dependencies.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
            <summary>
            Provides an abstraction for managing the assemblies of an application. A different
            implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
            <summary>
            Returns a list of assemblies available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of assemblies.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.GetAssemblies">
            <summary>
            Returns a list of assemblies available for the application.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1"/> of assemblies.</returns>
        </member>
        <member name="P:System.Web.Http.ApiController.Request">
            <summary>
            Gets the <see name="HttpRequestMessage"/> of the current ApiController.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.Configuration">
            <summary>
            Gets the <see name="HttpConfiguration"/> of the current ApiController.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.ControllerContext">
            <summary>
            Gets the <see name="HttpControllerContext"/> of the current ApiController.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.ModelState">
            <summary>
            Gets model state after the model binding process. This ModelState will be empty before model binding happens.
            Please do not populate this property other than for unit testing purpose.
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.Url">
            <summary>
            Gets an instance of a <see name="UrlHelper" />, which is used to generate URLs to other APIs.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.User">
            <summary>
            Returns the current principal associated with this request.
            </summary>
        </member>
        <member name="T:System.Web.Http.ApiController.FilterGrouping">
            <summary>
            Quickly split filters into different types 
            </summary>
            <remarks>Avoid <see cref="M:ReadOnlyCollection.Select"/> because it has a very slow implementation that shows on profiles.</remarks>
        </member>
        <member name="T:System.Web.Http.ValueProviders.IUriValueProviderFactory">
            <summary>
            This interface is implemented by any <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/> that supports
            the creation of a <see cref="T:System.Web.Http.ValueProviders.IValueProvider"/> to access the <see cref="T:System.Uri"/> of
            an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
            <summary>
            Find a binder for the given type
            </summary>
            <param name="configuration">a configuration object</param>
            <param name="modelType">the type of the model to bind against.</param>
            <returns>a binder, which can attempt to bind this type. Or null if the binder knows statically that it will never be able to bind the type.</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.FormUrlEncodedMediaTypeFormatterTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter"/>.  
            It is required because users can select formatters by this type.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.IFormatterTracer">
            <summary>
            Interface used to mark <see cref="T:System.Web.Http.Tracing.Tracers.MediaTypeFormatterTracer"/> classes.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.IFormatterTracer.Request">
            <summary>
            Gets the associated <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.IFormatterTracer.InnerFormatter">
            <summary>
            Gets the inner <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> this tracer is monitoring.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
            <summary>
            Default <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector"/> instance for choosing a <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> given a <see cref="T:System.Net.Http.HttpRequestMessage"/>
            A different implementation can be registered via the <see cref="P:System.Web.Http.HttpConfiguration.Services"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:System.Web.Http.RouteParameter">
            <summary>
            The <see cref="T:System.Web.Http.RouteParameter"/> class can be used to indicate properties about a route parameter (the literals and placeholders 
            located within segments of a <see cref="M:IHttpRoute.RouteTemplate"/>). 
            It can for example be used to indicate that a route parameter is optional.
            </summary>
        </member>
        <member name="F:System.Web.Http.RouteParameter.Optional">
            <summary>
            Optional Parameter
            </summary>
        </member>
        <member name="M:System.Web.Http.RouteParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Http.HttpRouteCollection"/>
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
            <summary>
            Maps the specified route template.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
            <summary>
            Maps the specified route template and sets default constraints.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
            <summary>
            Maps the specified route template and sets default route values and constraints.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
            <summary>
            Maps the specified route template and sets default route values, constraints, and end-point message handler.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <param name="handler">The handler to which the request will be dispatched.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
            <summary>
            Describes a parameter that gets bound via ModelBinding.  
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.IValueProviderParameterBinding">
            <summary>
            Describes a parameter binding that uses one or more instances of <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/>
            </summary>
        </member>
        <member name="P:System.Web.Http.ModelBinding.IValueProviderParameterBinding.ValueProviderFactories">
            <summary>
            Gets the <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/> instances used by this
            parameter binding.
            </summary>
        </member>
        <member name="T:System.Web.Http.Hosting.IHostBufferPolicySelector">
            <summary>
            Interface for controlling the use of buffering requests and responses in the host. If a host
            provides support for buffering requests and/or responses then it can use this interface to 
            determine the policy for when buffering is to be used.
            </summary>
        </member>
        <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
            <summary>
            Determines whether the host should buffer the entity body when processing a request with content.
            </summary>
            <param name="hostContext">The host-specific context.</param>
            <returns><c>true</c> if buffering should be used; otherwise a streamed request should be used.</returns>
        </member>
        <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
            <summary>
            Determines whether the host should buffer the <see cref="T:System.Net.Http.HttpResponseMessage"/> entity body.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/>response for which to determine
            whether host output buffering should be used for the response entity body.</param>
            <returns><c>true</c> if buffering should be used; otherwise a streamed response should be used.</returns>
        </member>
        <member name="T:System.Web.Http.Dependencies.IDependencyScope">
            <summary>
            Represents a scope that is tracked by the dependency injection container. The scope is
            used to keep track of resources that have been provided, so that they can then be
            subsequently released when <see cref="M:System.IDisposable.Dispose"/> is called.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>. Must return <c>null</c>
            if the service is not available (must not throw).
            </summary>
            <param name="serviceType">The object type.</param>
            <returns>The requested object, if found; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>. Must return an empty
            collection if the service is not available (must not return <c>null</c> or throw).
            </summary>
            <param name="serviceType">The object type.</param>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>. The sequence
            should be empty (not <c>null</c>) if no objects of the given type are available.</returns>
        </member>
        <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
            <summary>
            <see cref="T:System.Web.Http.Validation.ModelValidator"/> for required members.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.IModelBinder">
            <summary>
            Interface for model binding.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.FormattingUtilities">
            <summary>
            General purpose utilities to format strings used in tracing.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.MediaTypeFormatterTracer">
            <summary>
            Tracer to monitor <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerDescriptorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpControllerDescriptor">
            <summary>
            Description and configuration for a controller.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)">
            <summary>
            Creates a controller instance for the given <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="request">The request message</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters">
            <summary>
            Returns the collection of <see cref="T:System.Web.Http.Filters.IFilter">filters</see> associated with this descriptor's controller.
            </summary>
            <remarks>The default implementation calls <see cref="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1"/>.</remarks>
            <returns>A collection of filters associated with this controller.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
            <summary>
            Returns a collection of attributes that can be assigned to <typeparamref name="T"/> for this descriptor's controller.
            </summary>
            <remarks>The default implementation retrieves the matching set of attributes declared on <see cref="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType"/>.</remarks>
            <typeparam name="T">Used to filter the collection of attributes. Use a value of <see cref="T:System.Object"/> to retrieve all attributes.</typeparam>
            <returns>A collection of attributes associated with this controller.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Configuration">
            <summary>
            Gets the configuration associated with the <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>. 
            </summary>
        </member>
        <member name="F:System.Web.Http.Metadata.ModelMetadata._additionalValues">
            <summary>
            Explicit backing store for the things we want initialized by default, so don't have to call
            the protected virtual setters of an auto-generated property.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.ControllerServices">
            <summary>
            Represents a container for services that can be specific to a controller. 
            This shadows the services from its parent <see cref="T:System.Web.Http.Controllers.ServicesContainer"/>. A controller can either set a service here, or fall through 
            to the more global set of services. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.IsSingleService(System.Type)">
            <summary>
            Determine whether the service type should be fetched with GetService or GetServices. 
            </summary>
            <param name="serviceType">type of service to query</param>
            <returns>true iff the service is singular. </returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.Add(System.Type,System.Object)">
            <summary>
            Adds a service to the end of services list for the given service type. 
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="service">The service instance.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.AddRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds the services of the specified collection to the end of the services list for
            the given service type.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="services">The services to add.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.Clear(System.Type)">
            <summary>
            Removes all the service instances of the given service type. 
            </summary>
            <param name="serviceType">The service type to clear from the services list.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.FindIndex(System.Type,System.Predicate{System.Object})">
            <summary>
            Searches for a service that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the first occurrence.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="match">The delegate that defines the conditions of the element
            to search for. </param>
            <returns>The zero-based index of the first occurrence, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.Insert(System.Type,System.Int32,System.Object)">
            <summary>
            Inserts a service into the collection at the specified index.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="index">The zero-based index at which the service should be inserted.
            If <see cref="F:System.Int32.MaxValue"/> is passed, ensures the element is added to the end.</param>
            <param name="service">The service to insert.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.InsertRange(System.Type,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts the elements of the collection into the service list at the specified index.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="index">The zero-based index at which the new elements should be inserted.
            If <see cref="F:System.Int32.MaxValue"/> is passed, ensures the elements are added to the end.</param>
            <param name="services">The collection of services to insert.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.Remove(System.Type,System.Object)">
            <summary>
            Removes the first occurrence of the given service from the service list for the given service type.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="service">The service instance to remove.</param>
            <returns> <c>true</c> if the item is successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAll(System.Type,System.Predicate{System.Object})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="match">The delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the list.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAt(System.Type,System.Int32)">
            <summary>
            Removes the service at the specified index.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="index">The zero-based index of the service to remove.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.Replace(System.Type,System.Object)">
            <summary>
            Replaces all existing services for the given service type with the given
            service instance. This works for both singular and plural services. 
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="service">The service instance.</param>
            <inheritdoc/>        
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Replaces all existing services for the given service type with the given
            service instances.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="services">The service instances.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.ServicesContainer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.Controllers.ControllerServices.ReplaceSingle(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.Controllers.ControllerServices.ClearSingle(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:System.Web.Http.Description.ApiExplorer">
            <summary>
            Explores the URI space of the service based on routes, controllers and actions available in the system.
            </summary>
        </member>
        <member name="T:System.Web.Http.Description.IApiExplorer">
            <summary>
            Defines the interface for getting a collection of <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
            <summary>
            Gets the API descriptions.
            </summary>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Description.ApiExplorer"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
            <summary>
            Determines whether the controller should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation. Called when initializing the <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/>.
            </summary>
            <param name="controllerVariableValue">The controller variable value from the route.</param>
            <param name="controllerDescriptor">The controller descriptor.</param>
            <param name="route">The route.</param>
            <returns><c>true</c> if the controller should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
            <summary>
            Determines whether the action should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation. Called when initializing the <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/>.
            </summary>
            <param name="actionVariableValue">The action variable value from the route.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="route">The route.</param>
            <returns><c>true</c> if the action should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Gets a collection of HttpMethods supported by the action. Called when initializing the <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/>.
            </summary>
            <param name="route">The route.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>A collection of HttpMethods supported by the action.</returns>
        </member>
        <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
            <summary>
            Gets the API descriptions. The descriptions are initialized on the first access.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
            <summary>
            Gets or sets the documentation provider. The provider will be responsible for documenting the API.
            </summary>
            <value>
            The documentation provider.
            </value>
        </member>
        <member name="T:System.Web.PrefixContainer">
            <summary>
            This is a container for prefix values. It normalizes all the values into dotted-form and then stores
            them in a sorted array. All queries for prefixes are also normalized to dotted-form, and searches
            for ContainsPrefix are done with a binary search.
            </summary>
        </member>
        <member name="T:System.Web.Http.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Error.Format(System.String,System.Object[])">
            <summary>
            Formats the specified resource string using <see cref="M:CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotHttpOrHttpsScheme(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an "http" or "https" URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotAbsolute(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriHasQueryOrFragment(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI 
            without a query or fragment identifier and then logs it with <see cref="F:TraceLevel.Error"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.PropertyNull">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentOutOfRange(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeGreaterThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be greater than or equal to <paramref name="minValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="minValue">The minimum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeLessThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be less than or equal to <paramref name="maxValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="maxValue">The maximum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ObjectDisposed(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> initialized according to guidelines.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> for an invalid enum argument.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.Exception,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="innerException">Inner exception</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.NotSupported(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Properties.CommonWebApiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidAbsoluteUri">
            <summary>
              Looks up a localized string similar to Relative URI values are not supported: &apos;{0}&apos;. The URI must be absolute..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidHttpUriScheme">
            <summary>
              Looks up a localized string similar to Unsupported URI scheme: &apos;{0}&apos;. The URI scheme must be either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentUriHasQueryOrFragment">
            <summary>
              Looks up a localized string similar to URI must not contain a query component or a fragment identifier..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
            <summary>
            This <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> provides a required ModelValidator for members marked as [DataMember(IsRequired=true)].
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
            <summary>
            Dispatches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> to an <see cref="T:System.Web.Http.Controllers.IHttpController"/> implementation for processing.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Dispatches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> to an <see cref="T:System.Web.Http.Controllers.IHttpController"/>.
            </summary>
            <param name="request">The request to dispatch</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the ongoing operation.</returns>
        </member>
        <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.ServicesExtensions">
            <summary>
            This provides a centralized list of type-safe accessors describing where and how we get services.
            This also provides a single entry point for each service request. That makes it easy
            to see which parts of the code use it, and provides a single place to comment usage.
            Accessors encapsulate usage like:
            <list type="bullet">
            <item>Type-safe using {T} instead of unsafe <see cref="T:System.Type"/>.</item>
            <item>which type do we key off? This is interesting with type hierarchies.</item>
            <item>do we ask for singular or plural?</item>
            <item>is it optional or mandatory?</item>
            <item>what are the ordering semantics</item>
            </list>
            Expected that any <see cref="T:System.Collections.Generic.IEnumerable`1"/> we return is non-null, although possibly empty.
            </summary>
        </member>
        <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)">
            <summary>
            Controller activator is used to instantiate an <see cref="T:System.Web.Http.Controllers.IHttpController"/>.
            </summary>
            <returns>
            An <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/> instance or null if none are registered.
            </returns>
        </member>
        <member name="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)">
            <summary>
            Get ValueProviderFactories. The order of returned providers is the priority order that we search the factories.
            </summary>
        </member>
        <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)">
            <summary>
            Get a controller selector, which selects an <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> given an <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.HttpControllerTypeCache">
            <summary>
            Manages a cache of <see cref="T:System.Web.Http.Controllers.IHttpController"/> types detected in the system.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
            <summary>
            Parameter binding that will read from the body and invoke the formatters. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
            <summary>
            Gets the current <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher">
            <summary>
            This class is the default endpoint message handler which examines the <see cref="T:System.Web.Http.Routing.IHttpRoute"/>
            of the matched route, and chooses which message handler to call. If <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler"/>
            is <c>null</c>, then it delegates to <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher"/> class,
            using the provided <see cref="T:System.Web.Http.HttpConfiguration"/> and <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher"/>
            as the default handler.
            </summary>
            <param name="configuration">The server configuration.</param>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher"/> class,
            using the provided <see cref="T:System.Web.Http.HttpConfiguration"/> and <see cref="T:System.Net.Http.HttpMessageHandler"/>.
            </summary>
            <param name="configuration">The server configuration.</param>
            <param name="defaultHandler">The default handler to use when the <see cref="T:System.Web.Http.Routing.IHttpRoute"/> has no <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler"/>.</param>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:System.Web.Http.Validation.IModelValidatorCache">
            <summary>
            Defines a cache for <see cref="T:System.Web.Http.Validation.ModelValidator"/>s. This cache is keyed on the type or property that the metadata is associated with.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpActionContext">
            <summary>
            Contains information for the executing action.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.HttpActionContext"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
            <summary>
            Gets the current <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IHttpController"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
            <summary>
            Provides common keys for properties stored in the <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey">
            <summary>
            Provides a key for the <see cref="T:System.Web.Http.HttpConfiguration"/> associated with this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey">
            <summary>
            Provides a key for the <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> associated with this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey">
            <summary>
            Provides a key for the current <see cref="T:System.Threading.SynchronizationContext"/> stored in <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>.
            If <see cref="P:System.Threading.SynchronizationContext.Current"/> is <c>null</c> then no context is stored.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey">
            <summary>
            Provides a key for the collection of resources that should be disposed when a request is disposed.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DependencyScope">
            <summary>
            Provides a key for the dependency scope for this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.ClientCertificateKey">
            <summary>
            Provides a key for the client certificate for this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RetrieveClientCertificateDelegateKey">
            <summary>
            Provides a key for a delegate which can retrieve the client certificate for this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey">
            <summary>
            Provides a key for the <see cref="T:System.Guid"/> stored in <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>.
            This is the correlation id for that request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsLocalKey">
            <summary>
            Provides a key that indicates whether the request originates from a local address.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IncludeErrorDetailKey">
            <summary>
            Provides a key that indicates whether error details are to be included in the response for this HTTP request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestQueryNameValuePairsKey">
            <summary>
            Provides a key for the parsed query string stored in <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dependencies.IDependencyResolver">
            <summary>
            Represents a dependency injection container.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
            <summary>
            Starts a resolution scope. Objects which are resolved in the given scope will belong to
            that scope, and when the scope is disposed, those objects are returned to the container.
            Implementers should return a new instance of <see cref="T:System.Web.Http.Dependencies.IDependencyScope"/> every time this
            method is called, unless the container does not have any concept of scope or resource
            release (in which case, it would be okay to return 'this', so long as the calls to
            <see cref="M:System.IDisposable.Dispose"/> are effectively NOOPs).
            </summary>
            <returns>The dependency scope.</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.MessageHandlerTracer">
            <summary>
            Tracer to wrap a <see cref="T:System.Net.Http.DelegatingHandler"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpActionInvokerTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Gets the <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> instance for a given <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
            <param name="actionContext">The context.</param>
            <returns>An <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> instance.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Gets the collection of registered <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> instances.
            </summary>
            <param name="actionContext">The context.</param>
            <returns>A collection of <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> instances.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)">
            <summary>
            Gets the collection of registered <see cref="T:System.Web.Http.Validation.ModelValidator"/> instances.
            </summary>
            <param name="actionContext">The context.</param>
            <param name="metadata">The metadata.</param>
            <returns>A collection of registered <see cref="T:System.Web.Http.Validation.ModelValidator"/> instances.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})">
            <summary>
            Attempt to bind against the given ActionContext.
            </summary>
            <param name="actionContext">The action context.</param>
            <param name="bindingContext">The binding context.</param>
            <param name="binders">set of binders to use for binding</param>
            <returns>True if the bind was successful, else false.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.IsOptional">
            <summary>
            Gets a value indicating whether the parameter is optional.
            </summary>
            <value>
            <c>true</c> if the parameter is optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterBinderAttribute">
            <summary>
            Return a <see cref="T:System.Web.Http.ParameterBindingAttribute"/> if present on this parameter's signature or declared type.
            Returns null if no attribute is specified.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.IsOptional">
            <summary>
            Gets a value indicating whether the parameter is optional.
            </summary>
            <value>
            <c>true</c> if the parameter is optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
            <summary>
            This <see cref="T:System.Web.Http.Filters.IFilterProvider"/> implementation retrieves <see cref="T:System.Web.Http.Filters.FilterInfo">filters</see> associated with an <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>
            instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Returns the collection of filters associated with <paramref name="actionDescriptor"/>.
            </summary>
            <remarks>
            The implementation invokes <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters"/> and <see cref="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters"/>.
            </remarks>
            <param name="configuration">The configuration. This value is not used.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>A collection of filters.</returns>
        </member>
        <member name="T:System.Web.Http.HttpServer">
            <summary>
            Defines an implementation of an <see cref="T:System.Net.Http.HttpMessageHandler"/> which dispatches an 
            incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> and creates an <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class with default configuration and dispatcher.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class with default dispatcher.
            </summary>
            <param name="configuration">The <see cref="T:System.Web.Http.HttpConfiguration"/> used to configure this <see cref="T:System.Web.Http.HttpServer"/> instance.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class with a custom dispatcher.
            </summary>
            <param name="dispatcher">Http dispatcher responsible for handling incoming requests.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class.
            </summary>
            <param name="configuration">The <see cref="T:System.Web.Http.HttpConfiguration"/> used to configure this <see cref="T:System.Web.Http.HttpServer"/> instance.</param>
            <param name="dispatcher">Http dispatcher responsible for handling incoming requests.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged SRResources.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Dispatches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The request to dispatch</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the ongoing operation.</returns>
        </member>
        <member name="M:System.Web.Http.HttpServer.Initialize">
            <summary>
            Prepares the server for operation.
            </summary>
            <remarks>
            This method must be called after all configuration is complete
            but before the first request is processed.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpServer.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpServer.Configuration">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
            <summary>
            Defines the methods that are required for an <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
            <summary>
            Bind directly to the cancellation token
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.VoidResultConverter">
            <summary>
            A converter for creating a response from actions that do not return a value.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.IActionResultConverter">
            <summary>
            A contract for a conversion routine that can take the result of an action returned from
            <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
            and convert it to an instance of <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
            <summary>
            A converter for creating responses from actions that return an arbitrary T value.
            </summary>
            <typeparam name="T">The declared return type of an action.</typeparam>
        </member>
        <member name="T:System.Web.Http.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
            <summary>
            This <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector"/> selects required members by checking for any 
            required ModelValidators associated with the member. This is the default implementation used by
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.JsonMediaTypeFormatterTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/>.  
            It is required because users can select formatters by this type.
            </summary>
        </member>
        <member name="M:System.Web.Http.Internal.CollectionModelBinderUtil.GetGenericBinder(System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Instantiate a generic binder.
            </summary>
            <param name="supportedInterfaceType">Type that is updatable by this binder.</param>
            <param name="newInstanceType">Type that will be created by the binder if necessary.</param>
            <param name="openBinderType">Model binder type.</param>
            <param name="modelType">Model type.</param>
            <returns></returns>
        </member>
        <member name="T:System.Web.Http.Description.IDocumentationProvider">
            <summary>
            Defines the provider responsible for documenting the service.
            </summary>
        </member>
        <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Gets the documentation based on <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.
            </summary>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>Documentation for the controller.</returns>
        </member>
        <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>
            Gets the documentation based on <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor"/>.
            </summary>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>Documentation for the controller.</returns>
        </member>
        <member name="T:System.Web.Http.UriQueryUtility">
            <summary>
            Helpers for encoding, decoding, and parsing URI query components. In .Net 4.5
            please use the WebUtility class.
            </summary>
        </member>
        <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
            <summary>
            This attribute is used to specify a custom <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
            <summary>
            This <see cref="T:System.Net.Http.Formatting.IFormatterLogger"/> logs formatter errors to the provided <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceRecord">
            <summary>
            Data object used by <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> to record traces.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
            <summary>
            Gets or sets the tracing category.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
            <summary>
            Gets or sets the kind of trace.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
            <summary>
            Gets or sets the tracing level.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
            <summary>
            Gets or sets the logical operation name being performed.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
            <summary>
            Gets or sets the logical name of the object performing the operation
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
            <summary>
            Optional user-defined property bag.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
            <summary>
            Gets the correlation ID  from the <see cref="P:System.Web.Http.Tracing.TraceRecord.Request"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
            <summary>
            Gets or sets the <see cref="T:System.Net.HttpStatusCode"/> associated with the <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
            <summary>
            Gets the <see cref="T:System.DateTime"/> of this trace (via <see cref="P:System.DateTime.UtcNow"/>)
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceKind">
            <summary>
            Describes the kind of <see cref="T:System.Web.Http.Tracing.TraceRecord"/> for an individual trace operation.
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
            <summary>
            Single trace, not part of a Begin/End trace pair
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
            <summary>
            Trace marking the beginning of some operation.
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceKind.End">
            <summary>
            Trace marking the end of some operation.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceCategories">
            <summary>
            Category names traced by the default tracing implementation.
            </summary>
            <remarks>
            The list of permitted category names is open-ended, and users may define their own.
            It is recommended that category names reflect the namespace of their
            respective area.  This prevents name conflicts and allows external
            logging tools to enable or disable tracing by namespace.
            </remarks>
        </member>
        <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Debug"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Debug"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Debug"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Error"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Error"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Error"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Fatal"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Fatal"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Fatal"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
            <summary>
            Writes a single <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the given <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> if the trace writer
            is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so cannot be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> for the trace.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to trace.   It may not be null.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a single <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the given <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> if the trace writer
            is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> for the trace.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to trace.   It may not be null.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
            <summary>
            Writes a single <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the given <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> if the trace writer
            is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Traces both a begin and an end trace around a specified operation.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate the trace.  It may be null.</param>
            <param name="category">The logical category of the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> of the trace.</param>
            <param name="operatorName">The name of the object performing the operation.  It may be null.</param>
            <param name="operationName">The name of the operation being performaed.  It may be null.</param>
            <param name="beginTrace">The <see cref="T:System.Action"/> to invoke prior to performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="execute">An <see cref="T:System.Action"/> that performs the operation.</param>
            <param name="endTrace">The <see cref="T:System.Action"/> to invoke after successfully performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="errorTrace">The <see cref="T:System.Action"/> to invoke if an error was encountered performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Traces both a begin and an end trace around a specified asynchronous operation.
            </summary>
            <remarks>The end trace will occur when the asynchronous operation completes, either success or failure.</remarks>
            <typeparam name="TResult">The type of result produced by the <see cref="T:System.Threading.Tasks.Task"/>.</typeparam>
            /// <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate the trace.  It may be null.</param>
            <param name="category">The logical category of the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> of the trace.</param>
            <param name="operatorName">The name of the object performing the operation.  It may be null.</param>
            <param name="operationName">The name of the operation being performed.  It may be null.</param>
            <param name="beginTrace">The <see cref="T:System.Action"/> to invoke prior to performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="execute">An <see cref="T:System.Func`1"/> that returns the <see cref="T:System.Threading.Tasks.Task"/> that will perform the operation.</param>
            <param name="endTrace">The <see cref="T:System.Action"/> to invoke after successfully performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  The result of the completed task will also
            be passed to this action.  This action may be null.</param>
            <param name="errorTrace">The <see cref="T:System.Action"/> to invoke if an error was encountered performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> returned by the operation.</returns>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Traces both a begin and an end trace around a specified asynchronous operation.
            </summary>
            <remarks>The end trace will occur when the asynchronous operation completes, either success or failure.</remarks>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate the trace.  It may be null.</param>
            <param name="category">The logical category of the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> of the trace.</param>
            <param name="operatorName">The name of the object performing the operation.  It may be null.</param>
            <param name="operationName">The name of the operation being performed.  It may be null.</param>
            <param name="beginTrace">The <see cref="T:System.Action"/> to invoke prior to performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="execute">An <see cref="T:System.Func`1"/> that returns the <see cref="T:System.Threading.Tasks.Task"/> that will perform the operation.</param>
            <param name="endTrace">The <see cref="T:System.Action"/> to invoke after successfully performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="errorTrace">The <see cref="T:System.Action"/> to invoke if an error was encountered performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> returned by the operation.</returns>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
            <summary>
            Reflection based action selector. 
            We optimize for the case where we have an <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector"/> instance per <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>
            instance but can support cases where there are many <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instances for one 
            <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector"/> as well. In the latter case the lookup is slightly slower because it goes through
            the <see cref="P:HttpControllerDescriptor.Properties"/> dictionary.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            Selects the action.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <returns>The selected action.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
            <summary>
            Returns a map, keyed by action string, of all <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/> that the selector can select. 
            This is primarily called by <see cref="T:System.Web.Http.Description.IApiExplorer"/> to discover all the possible actions in the controller.
            </summary>
            <param name="controllerDescriptor">The controller descriptor.</param>
            <returns>A map of <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/> that the selector can select, or null if the selector does not have a well-defined mapping of <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpRouteCollection"/> class with a <see cref="M:VirtualPathRoot"/>
            value of "/".
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
            <summary>
            Parameter binds to the request
            </summary>
        </member>
        <member name="T:System.Web.Http.HttpResponseException">
            <summary>
            An exception that allows for a given <see cref="T:System.Net.Http.HttpResponseMessage"/>
            to be returned to the client.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpResponseException"/> class.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpResponseException"/> class.
            </summary>
            <param name="response">The response message.</param>
        </member>
        <member name="P:System.Web.Http.HttpResponseException.Response">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpResponseMessage"/> to return to the client.
            </summary>
        </member>
        <member name="T:System.Web.Http.AllowAnonymousAttribute">
            <summary>
            Actions and controllers marked with this attribute are skipped by <see cref="T:System.Web.Http.AuthorizeAttribute"/> during authorization.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpActionBinding">
            <summary>
            This describes *how* the binding will happen. Does not actually bind. 
            This is static for a given action descriptor and can be reused across requests. 
            This may be a nice thing to log. Or set a breakpoint after we create and preview what's about to happen. 
            In theory, this could be precompiled for each Action descriptor.  
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
            <summary>
            Back pointer to the action this binding is for. 
            This can also provide the Type[], string[] names for the parameters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
            <summary>
            Specifies synchronous bindings for each parameter.This is a parallel array to the ActionDescriptor's parameter array. 
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.RequestMessageHandlerTracer">
            <summary>
            Internal <see cref="T:System.Net.Http.DelegatingHandler"/> that executes before and after all of the installed message handlers.
            The begin trace of this handler is the first trace for the request.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpActionDescriptorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes the described action and returns a <see cref="T:System.Threading.Tasks.Task`1"/> that once completed will
            contain the return value of the action.
            </summary>
            <param name="controllerContext">The context.</param>
            <param name="arguments">The arguments.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that once completed will contain the return value of the action.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline">
            <summary>
            Returns the filters for the given configuration and action. The filter collection is ordered
            according to the FilterScope (in order from least specific to most specific: First, Global, Controller, Action).
            
            If a given filter disallows duplicates (AllowMultiple=False) then the most specific filter is maintained
            and less specific filters get removed (e.g. if there is a Authorize filter with a Controller scope and another
            one with an Action scope then the one with the Action scope will be maintained and the one with the Controller
            scope will be discarded).
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1"/> of all filters associated with this <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType">
            <summary>
            The return type of the method or <c>null</c> if the method does not return a value (e.g. a method returning
            <c>void</c>).
            </summary>
            <remarks>
            This property should describe the type of the value contained by the result of executing the action
            via the <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter">
            <summary>
            Gets the converter for correctly transforming the result of calling
            <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/> into an instance of
            <see cref="T:System.Net.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            The behavior of the returned converter should align with the action's declared <see cref="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType"/>.
            </remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="T:System.Web.Http.AuthorizeAttribute">
            <summary>
            An authorization filter that verifies the request's <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <remarks>You can declare multiple of these attributes per action. You can also use <see cref="T:System.Web.Http.AllowAnonymousAttribute"/>
            to disable authorization for a specific action.</remarks>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Determines whether access for this particular request is authorized. This method uses the user <see cref="T:System.Security.Principal.IPrincipal"/>
            returned via <see cref="P:System.Threading.Thread.CurrentPrincipal"/>. Authorization is denied if the user is not authenticated,
            the user is not in the authorized group of <see cref="P:System.Web.Http.AuthorizeAttribute.Users"/> (if defined), or if the user is not in any of the authorized 
            <see cref="P:System.Web.Http.AuthorizeAttribute.Roles"/> (if defined).
            </summary>
            <param name="actionContext">The context.</param>
            <returns><c>true</c> if access is authorized; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Called when an action is being authorized. This method uses the user <see cref="T:System.Security.Principal.IPrincipal"/>
            returned via <see cref="P:System.Threading.Thread.CurrentPrincipal"/>. Authorization is denied if
            - the request is not associated with any user.
            - the user is not authenticated,
            - the user is authenticated but is not in the authorized group of <see cref="P:System.Web.Http.AuthorizeAttribute.Users"/> (if defined), or if the user
            is not in any of the authorized <see cref="P:System.Web.Http.AuthorizeAttribute.Roles"/> (if defined).
            
            If authorization is denied then this method will invoke <see cref="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)"/> to process the unauthorized request.
            </summary>
            <remarks>You can use <see cref="T:System.Web.Http.AllowAnonymousAttribute"/> to cause authorization checks to be skipped for a particular
            action or controller.</remarks>
            <seealso cref="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)"/>
            <param name="actionContext">The context.</param>
            <exception cref="T:System.ArgumentNullException">The context parameter is null.</exception>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Processes requests that fail authorization. This default implementation creates a new response with the
            Unauthorized status code. Override this method to provide your own handling for unauthorized requests.
            </summary>
            <param name="actionContext">The context.</param>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.SplitString(System.String)">
            <summary>
            Splits the string on commas and removes any leading/trailing whitespace from each result item.
            </summary>
            <param name="original">The input string.</param>
            <returns>An array of strings parsed from the input <paramref name="original"/> string.</returns>
        </member>
        <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
            <summary>
            Gets or sets the authorized roles.
            </summary>
            <value>
            The roles string.
            </value>
            <remarks>Multiple role names can be specified using the comma character as a separator.</remarks>
        </member>
        <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
            <summary>
            Gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>The unique identifier for the attribute.</returns>
        </member>
        <member name="P:System.Web.Http.AuthorizeAttribute.Users">
            <summary>
            Gets or sets the authorized users.
            </summary>
            <value>
            The users string.
            </value>
            <remarks>Multiple role names can be specified using the comma character as a separator.</remarks>
        </member>
        <member name="T:System.Web.Http.Validation.ModelValidatorCache">
            <summary>
            Defines a cache for <see cref="T:System.Web.Http.Validation.ModelValidator"/>s. This cache is keyed on the type or property that the metadata is associated with.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.Validators.ErrorModelValidator">
            <summary>
            A <see cref="T:System.Web.Http.Validation.ModelValidator"/> to represent an error. This validator will always throw an exception regardless of the actual model value.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ExceptionFilterTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.IExceptionFilter"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.AuthorizationFilterTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.IAuthorizationFilter"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.AuthorizationFilterAttributeTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ActionFilterAttributeTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.ActionFilterAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Routing.HttpRoute">
            <summary>
            Route class for self-host (i.e. hosted outside of ASP.NET). This class is mostly the
            same as the System.Web.Routing.Route implementation.
            This class has the same URL matching functionality as System.Web.Routing.Route. However,
            in order for this route to match when generating URLs, a special "httproute" key must be
            specified when generating the URL.
            </summary>
        </member>
        <member name="T:System.Web.Http.Routing.IHttpRoute">
            <summary>
            <see cref="T:System.Web.Http.Routing.IHttpRoute"/> defines the interface for a route expressing how to map an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> to a particular controller
            and action.
            </summary>
        </member>
        <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
            <summary>
            Determine whether this route is a match for the incoming request by looking up the <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for the route.
            </summary>
            <param name="virtualPathRoot">The virtual path root.</param>
            <param name="request">The request.</param>
            <returns>The <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for a route if matches; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Compute a URI based on the route and the values provided.
            </summary>
            <param name="request">The request message.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
            <summary>
            Gets the route template describing the URI pattern to match against. 
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
            <summary>
            Gets the default values for route parameters if not provided by the incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
            <summary>
            Gets the constraints for the route parameters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
            <summary>
            Gets any additional data tokens not used directly to determine whether a route matches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.Handler">
            <summary>
            Gets the message handler that will be the recipient of the request. If <c>null</c>, the default handler will
            be used (which dispatches messages to implementations of <see cref="T:System.Web.Http.Controllers.IHttpController"/>).
            </summary>
        </member>
        <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey">
            <summary>
            Key used to signify that a route URL generation request should include HTTP routes (e.g. Web API).
            If this key is not specified then no HTTP routes will match.
            </summary>
        </member>
        <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Attempt to generate a URI that represents the values passed in based on current
            values from the <see cref="T:System.Web.Http.Routing.HttpRouteData"/> and new values using the specified <see cref="T:System.Web.Http.Routing.HttpRoute"/>.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="values">The route values.</param>
            <returns>A <see cref="T:System.Web.Http.Routing.HttpVirtualPathData"/> instance or null if URI cannot be generated.</returns>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection">
            <summary>
            Collection of functions that can produce a parameter binding for a given parameter.   
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Add(System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
            <summary>
            Adds function to the end of the collection. 
            The function added is a wrapper around funcInner that checks that parameterType matches typeMatch.
            </summary>
            <param name="typeMatch">type to match against HttpParameterDescriptor.ParameterType</param>
            <param name="funcInner">inner function that is invoked if type match succeeds</param>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Insert(System.Int32,System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
            <summary>
            Insert a function at the specified index in the collection.
            /// The function added is a wrapper around funcInner that checks that parameterType matches typeMatch.
            </summary>
            <param name="index">index to insert at.</param>
            <param name="typeMatch">type to match against HttpParameterDescriptor.ParameterType</param>
            <param name="funcInner">inner function that is invoked if type match succeeds</param>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.LookupBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>
            Execute each binding function in order until one of them returns a non-null binding. 
            </summary>
            <param name="parameter">parameter to bind.</param>
            <returns>the first non-null binding produced for the parameter. Of null if no binding is produced.</returns>
        </member>
        <member name="T:System.Web.Http.Description.ApiDescription">
            <summary>
            Describes an API defined by relative URI path and HTTP method.
            </summary>
        </member>
        <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Description.ApiDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>
            The relative path.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
            <summary>
            Gets or sets the action descriptor that will handle the API.
            </summary>
            <value>
            The action descriptor.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.Route">
            <summary>
            Gets or sets the registered route for the API.
            </summary>
            <value>
            The route.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
            <summary>
            Gets or sets the documentation of the API.
            </summary>
            <value>
            The documentation.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
            <summary>
            Gets the supported response formatters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
            <summary>
            Gets the supported request body formatters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
            <summary>
            Gets the parameter descriptions.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.ID">
            <summary>
            Gets the ID. The ID is unique within <see cref="T:System.Web.Http.HttpServer"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
            <summary>
            A converter for actions with a return type of <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.HttpMethodHelper">
            <summary>
            Various helper methods for the static members of <see cref="T:System.Net.Http.HttpMethod"/>. 
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpMethodHelper.GetHttpMethod(System.String)">
            <summary>
            Gets the static <see cref="T:System.Net.Http.HttpMethod"/> instance for any given HTTP method name.
            </summary>
            <param name="method">The HTTP request method.</param>
            <returns>An existing static <see cref="T:System.Net.Http.HttpMethod"/> or a new instance if the method was not found.</returns>
        </member>
        <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
            <summary>
            Recursively validate an object. 
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.IBodyModelValidator">
            <summary>
            Validates the body parameter of an action after the parameter has been read by the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
            <summary>
            Determines whether the <paramref name="model"/> is valid and adds any validation errors to the <paramref name="actionContext"/>'s <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary"/>
            </summary>
            <param name="model">The model to be validated.</param>
            <param name="type">The <see cref="T:System.Type"/> to use for validation.</param>
            <param name="metadataProvider">The <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> used to provide the model metadata.</param>
            <param name="actionContext">The <see cref="T:System.Web.Http.Controllers.HttpActionContext"/> within which the model is being validated.</param>
            <param name="keyPrefix">The <see cref="T:System.String"/> to append to the key for any validation errors.</param>
            <returns><c>true</c>if <paramref name="model"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
            <summary>
            Determines whether the <paramref name="model"/> is valid and adds any validation errors to the <paramref name="actionContext"/>'s <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary"/>
            </summary>
            <param name="model">The model to be validated.</param>
            <param name="type">The <see cref="T:System.Type"/> to use for validation.</param>
            <param name="metadataProvider">The <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> used to provide the model metadata.</param>
            <param name="actionContext">The <see cref="T:System.Web.Http.Controllers.HttpActionContext"/> within which the model is being validated.</param>
            <param name="keyPrefix">The <see cref="T:System.String"/> to append to the key for any validation errors.</param>
            <returns><c>true</c>if <paramref name="model"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ContentNegotiatorTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.IContentNegotiator"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpActionSelectorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IHttpActionSelector"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ITraceWriter">
            <summary>
            Interface to write <see cref="T:System.Web.Http.Tracing.TraceRecord"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Creates and writes a new <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the current <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>
            if tracing is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <remarks>
            The decision whether tracing is enabled for a specific category and level
            is an implementation detail of each individual <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.
            <para>
            If the current <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> decides tracing is enabled for the given 
            category and level, it will construct a new <see cref="T:System.Web.Http.Tracing.TraceRecord"/> and invoke 
            the caller's <paramref name="traceAction"/> to allow the caller to fill in additional
            information.
            </para>
            <para>
            If the current <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> decides tracing is not enabled for the given
            category and level, no <see cref="T:System.Web.Http.Tracing.TraceRecord"/> will be created,
            and the <paramref name="traceAction"/> will not be called.
            </para> 
            </remarks>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate
            the <see cref="T:System.Web.Http.Tracing.TraceRecord"/>.  It may be <c>null</c> but doing so will result in
            a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> that is not correlated with its originating request.</param>
            <param name="category">The logical category for the trace.  Users may define their own.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> at which to write this trace.</param>
            <param name="traceAction">The action to invoke if tracing is enabled.  The caller is expected
            to fill in any or all of the values of the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> in this action.</param>
        </member>
        <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
            <summary>
            Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>'s from path extension appearing in <see cref="T:System.Web.Http.Routing.IHttpRouteData"/>.
            It uses the value of the {ext} URL parameter from <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for a match.
            </summary>
            <example>
            This sample shows how to use the UriPathExtensionMapping to map urls ending with ".json" to "application/json"
            <code>
            config.Routes.MapHttpRoute("Default", "{controller}");
            config.Routes.MapHttpRoute("DefaultWithExt", "{controller}.{ext}");
            config.Formatters.JsonFormatter.AddUriPathExtensionMapping("json", "application/json");
            </code>
            </example>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> class.
            </summary>
            <param name="uriPathExtension">The extension corresponding to <paramref name="mediaType"/>.
            This value should not include a dot or wildcards.</param>
            <param name="mediaType">The media type that will be returned if <paramref name="uriPathExtension"/> is matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> class.
            </summary>
            <param name="uriPathExtension">The extension corresponding to <paramref name="mediaType"/>.
            This value should not include a dot or wildcards.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that will be returned if <paramref name="uriPathExtension"/> is matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a value indicating whether this <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/>
            instance can provide a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for the given <paramref name="request"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to check.</param>
            <returns>If this <paramref name="request"/>'s route data contains a match for <see cref="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension"/>
            it returns <c>1.0</c> otherwise <c>0.0</c>.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
            <summary>
            Gets the <see cref="T:System.Uri"/> path extension.
            </summary>
        </member>
        <member name="T:System.Web.Http.Routing.BoundRouteTemplate">
            <summary>
            Represents a URI generated from a <see cref="T:System.Web.Http.Routing.HttpParsedRoute"/>. 
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Implementation of <see cref="T:System.Web.Http.Controllers.IActionValueBinder"/>, Primary entry point for binding parameters for an action.
            </summary>           
        </member>
        <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.EnsureOneBodyParameter(System.Web.Http.Controllers.HttpActionBinding)">
            <summary>
            Update actionBinding to enforce there is at most 1 body parameter. 
            If there are multiple, convert them all to <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding"/>
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
            <summary>
            Attempts to retrieve a strongly-typed value from a <paramref name="response"/>.
            </summary>
            <remarks>
            If <see cref="P:System.Net.Http.HttpResponseMessage.Content"/> is an instance of <see cref="T:System.Net.Http.ObjectContent"/>
            attempts to retrieve the <see cref="P:System.Net.Http.ObjectContent.Value"/> if it is compatible with <typeparamref name="T"/>.
            If it is it returns <c>true</c> and sets <paramref name="value"/>. If not it returns <c>false</c> and
            sets <paramref name="value"/> to the default instance of <typeparamref name="T"/>.
            </remarks>
            <typeparam name="T">The type of the value to retrieve.</typeparam>
            <param name="response">The response.</param>
            <param name="value">Will contain the retrieved value if this method succeeds.</param>
            <returns>Returns <c>true</c> if the response has a content with a value that can be cast to <typeparamref name="T"/>,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessageExtensions.EnsureResponseHasRequest(System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage)">
            <summary>
            Attaches the given <paramref name="request"/> to the <paramref name="response"/> if the response does not already
            have a pointer to a request.
            </summary>
            <param name="response">The response.</param>
            <param name="request">The request.</param>
        </member>
        <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
            <summary>
            An action descriptor representing a reflected synchronous or asynchronous action method.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.CacheAttrsIActionMethodSelector">
            <summary>
            Caches that the ActionSelector use.
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType">
            <inheritdoc/>
        </member>
        <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
            <summary>
            Enum to indicate whether error details, such as exception messages and stack traces, should be included in error messages.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Default">
            <summary>
            Default to the host specific behavior. This looks at the CustomErrors setting on webhost and
            defaults to LocalOnly in selfhost.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
            <summary>
            Only include error details when responding to a local request.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
            <summary>
            Always include error details.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
            <summary>
            Never include error details.
            </summary>
        </member>
        <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get a value provider with values from the given <paramref name="actionContext"/>.
            </summary>
            <param name="actionContext">action context that value provider will populate from</param>
            <returns>a value provider instance or null</returns>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
            <summary>
            Provides an abstraction for managing the controller types of an application. A different
            implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of controllers.</returns>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver"/> with no external dependencies.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver"/> with a default
            filter for detecting controller types.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
            <summary>
            Creates a new <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver"/> instance using a predicate to filter controller types.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of controllers.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.HasValidControllerName(System.Type)">
            <summary>
            We match if type name ends with "Controller" and that is not the only part of the 
            name (i.e it can't be just "Controller"). The reason is that the route name has to 
            be a non-empty prefix of the controller type name.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.CatchInfo,System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.CatchInfo{``0},System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task{``0}}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            Since this method consumes a task with no return value, you must provide the return value to be used
            when the inner task ran to successful completion.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject(System.Threading.Tasks.Task)">
            <summary>
            Cast Task to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Cast Task of T to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastFromObject``1(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Cast Task of object to Task of T
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally(System.Threading.Tasks.Task,System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.MarkExceptionsObserved(System.Threading.Tasks.Task)">
            <summary>
            Marks a Task as "exception observed". The Task is required to have been completed first.
            </summary>
            <remarks>
            Useful for 'finally' clauses, as if the 'finally' action throws we'll propagate the new
            exception and lose track of the inner exception.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Action,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Throws the first faulting exception for a task which is faulted. It attempts to preserve the original
            stack trace when throwing the exception (which should always work in 4.5, and should also work in 4.0
            when running in full trust). Note: It is the caller's responsibility not to pass incomplete tasks to
            this method, because it does degenerate into a call to the equivalent of .Wait() on the task when it
            hasn't yet completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToAsyncVoidTask(System.Action)">
            <summary>
            Adapts any action into a Task (returning AsyncVoid, so that it's usable with Task{T} extension methods).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToTask``1(System.Threading.Tasks.Task,System.Threading.CancellationToken,``0)">
            <summary>
            Changes the return value of a task to the given result, if the task ends in the RanToCompletion state.
            This potentially imposes an extra ContinueWith to convert a non-completed task, so use this with caution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.TryGetResult``1(System.Threading.Tasks.Task{``0},``0@)">
            <summary>
            Attempts to get the result value for the given task. If the task ran to completion, then
            it will return true and set the result value; otherwise, it will return false.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpersExtensions.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfoBase`1.Throw">
            <summary>
            Returns a CatchResult that re-throws the original exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.Exception">
            <summary>
            The exception that was thrown to cause the Catch block to execute.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.CatchInfoBase`1.CatchResult">
            <summary>
            Represents a result to be returned from a Catch handler.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.CatchResult.Task">
            <summary>
            Gets or sets the task to be returned to the caller.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Handled">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Task(System.Threading.Tasks.Task)">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Handled(`0)">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
            <param name="returnValue">The return value of the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Task(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
            <summary>
            An implementation of <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> which providers validators
            for attributes which derive from <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>. It also provides
            a validator for types which implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
            <summary>
            Registers an adapter type for the given <paramref name="modelType"/>, which must
            implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>. The adapter type must derive from
            <see cref="T:System.Web.Http.Validation.ModelValidator"/> and it must contain a public constructor
            which takes two parameters of types <see cref="T:System.Web.Http.Metadata.ModelMetadata"/> and
            <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
            <summary>
            Registers an adapter factory for the given <paramref name="modelType"/>, which must
            implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
            <summary>
            Registers the default adapter type for objects which implement
            <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>. The adapter type must derive from
            <see cref="T:System.Web.Http.Validation.ModelValidator"/> and it must contain a public constructor
            which takes two parameters of types <see cref="T:System.Web.Http.Metadata.ModelMetadata"/> and
            <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
            <summary>
            Registers the default adapter factory for objects which implement
            <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Services.DefaultServices">
            <summary>
                <para>
                    Represents a container for service instances used by the <see cref="T:System.Web.Http.HttpConfiguration"/>. Note that
                    this container only supports known types, and methods to get or set arbitrary service types will
                    throw <see cref="T:System.ArgumentException"/> when called. For creation of arbitrary types, please use
                    <see cref="T:System.Web.Http.Dependencies.IDependencyResolver"/> instead. The supported types for this container are:
                </para>
                <list type="bullet">
                    <item><see cref="T:System.Web.Http.Controllers.IActionValueBinder"/></item>
                    <item><see cref="T:System.Web.Http.Description.IApiExplorer"/></item>
                    <item><see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver"/></item>
                    <item><see cref="T:System.Web.Http.Validation.IBodyModelValidator"/></item>
                    <item><see cref="T:System.Net.Http.Formatting.IContentNegotiator"/></item>
                    <item><see cref="T:System.Web.Http.Description.IDocumentationProvider"/></item>
                    <item><see cref="T:System.Web.Http.Filters.IFilterProvider"/></item>
                    <item><see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector"/></item>
                    <item><see cref="T:System.Web.Http.Controllers.IHttpActionInvoker"/></item>
                    <item><see cref="T:System.Web.Http.Controllers.IHttpActionSelector"/></item>
                    <item><see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/></item>
                    <item><see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector"/></item>
                    <item><see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver"/></item>
                    <item><see cref="T:System.Web.Http.Tracing.ITraceManager"/></item>
                    <item><see cref="T:System.Web.Http.Tracing.ITraceWriter"/></item>
                    <item><see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider"/></item>
                    <item><see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/></item>
                    <item><see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/></item>
                    <item><see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/></item>
                </list>
                <para>
                    Passing any type which is not on this to any method on this interface will cause
                    an <see cref="T:System.ArgumentException"/> to be thrown.
                </para>
            </summary>
        </member>
        <member name="M:System.Web.Http.Services.DefaultServices.#ctor">
            <summary>
            This constructor is for unit testing purposes only.
            </summary>
        </member>
        <member name="M:System.Web.Http.Services.DefaultServices.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.Services.DefaultServices.GetService(System.Type)">
            <summary>
            Try to get a service of the given type.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>The first instance of the service, or null if the service is not found.</returns>
        </member>
        <member name="M:System.Web.Http.Services.DefaultServices.GetServices(System.Type)">
            <summary>
            Try to get a list of services of the given type.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>The list of service instances of the given type. Returns an empty enumeration if the
            service is not found. </returns>
        </member>
        <member name="T:System.Web.Http.Controllers.IControllerConfiguration">
            <summary>
            If a controller is decorated with an attribute with this interface, then it gets invoked
            to initialize the controller settings. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.IControllerConfiguration.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
            <summary>
            Callback invoked to set per-controller overrides for this controllerDescriptor.
            </summary>
            <param name="controllerSettings">The controller settings to initialize.</param>
            <param name="controllerDescriptor">The controller descriptor. Note that the <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> can be associated with the derived controller type given that <see cref="T:System.Web.Http.Controllers.IControllerConfiguration"/> is inherited.</param>
        </member>
        <member name="T:System.Web.Http.Controllers.ParameterBindingExtensions">
            <summary>
            Convenience helpers to easily create specific types of parameter bindings
            These provide a direct programmatic counterpart to the <see cref="T:System.Web.Http.ParameterBindingAttribute"/> attributes. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
            <summary>
            If we know statically that this binding can never succeed, then use an error binding.
            This will prevent the action from executing.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="message">error message for user.</param>
            <returns>an error binding. Specifically, IsValid on the binding will be false.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)">
            <summary>
            Bind the parameter as if it had the given attribute on the declaration.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="attribute">attribute to describe the binding.</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>
            Bind the parameter using model binding. Get all other information from the configuration.
            This is the same as having a plain ModelBinderAttribute on the parameter.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)">
            <summary>
            Bind the parameter using the given model binder. 
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="binder">model binder to use on parameter</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])">
            <summary>
            Bind the parameter using default model binding but with the supplied value providers.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="valueProviderFactories">value provider factories to feed to model binders</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
            <summary>
            Bind the parameter using default model binding but with the supplied value providers.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="valueProviderFactories">value provider factories to feed to model binders</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
            <summary>
            Bind the parameter using the supplied binder and value providers.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="binder">model binder to use for binding.</param>
            <param name="valueProviderFactories">value provider factories to feed to model binder.</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>
            Bind the parameter from the body using the formatters from the configuration. 
            This is like having a [FromBody] attribute on the parameter
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Bind this parameter from the body using the supplied set of formatters.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="formatters">formatters to choose from when binding the body</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Bind this parameter from the body using the supplied set of formatters.
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="formatters">formatters to choose from when binding the body</param>
            <returns>a binding</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
            <summary>
            Bind this parameter from the body using the supplied set of formatters and validator. 
            </summary>
            <param name="parameter">parameter to provide binding for.</param>
            <param name="formatters">formatters to choose from when binding the body</param>
            <param name="bodyModelValidator">a validator. Null to disable validation for this parameter.</param>
            <returns>a binding</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.XmlMediaTypeFormatterTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/>.  
            It is required because users can select formatters by this type.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.FormatterParameterBindingTracer">
            <summary>
            Tracer to wrap a <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding"/>.
            Its primary purpose is to intercept binding requests so that it can create tracers for the formatters.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ExceptionFilterAttributeTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceLevel">
            <summary>
            Available trace levels.
            </summary>
            <remarks>
            The interpretation of these levels is the responsibility of the
            <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> implementation.   The general convention is that
            enabling a particular trace level also enables all levels greater than or
            equal to it.  For example, tracing at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> level would
            generally trace if the trace writer was enabled to trace at level <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/>.
            </remarks>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
            <summary>
            Tracing is disabled
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
            <summary>
            Trace level for debugging traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
            <summary>
            Trace level for informational traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
            <summary>
            Trace level for warning traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
            <summary>
            Trace level for error traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
            <summary>
            Trace level for fatal traces
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
            <summary>
            Default implementation of an <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>.
            A different implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            We optimize for the case where we have an <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker"/> 
            instance per <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instance but can support cases where there are
            many <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instances for one <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker"/> 
            as well. In the latter case the lookup is slightly slower because it goes through the 
            <see cref="P:HttpControllerDescriptor.Properties"/> dictionary.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
            <summary>
            Creates the <see cref="T:System.Web.Http.Controllers.IHttpController"/> specified by <paramref name="controllerType"/> using the given <paramref name="request"/>
            </summary>
            <param name="request">The request message.</param>
            <param name="controllerType">Type of the controller.</param>
            <param name="controllerDescriptor">The controller descriptor</param>
            <returns>An instance of type <paramref name="controllerType"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerActivatorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ITraceManager">
            <summary>
            Interface to initialize the tracing layer.
            </summary>
            <remarks>
            This is an extensibility interface that may be inserted into
            <see cref="P:System.Web.Http.HttpConfiguration.Services"/> to provide a replacement for the
            entire tracing layer.
            </remarks>
        </member>
        <member name="T:System.Web.Http.Description.ApiParameterDescription">
            <summary>
            Describes a parameter on the API defined by relative URI path and HTTP method.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
            <summary>
            Gets or sets the documentation.
            </summary>
            <value>
            The documentation.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
            <summary>
            Gets or sets the source of the parameter. It may come from the request URI, request body or other places.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
            <summary>
            Gets or sets the parameter descriptor.
            </summary>
            <value>
            The parameter descriptor.
            </value>
        </member>
        <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
            <summary>
            This attribute can be used on the controllers and actions to influence the behavior of <see cref="T:System.Web.Http.Description.ApiExplorer"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
            <summary>
            Gets or sets a value indicating whether to exclude the controller or action from the ApiDescriptions generated by <see cref="T:System.Web.Http.Description.ApiExplorer"/>.
            </summary>
            <value>
              <c>true</c> if the controller or action should be ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpParameterBindingTracer">
            <summary>
            Tracer to wrap an <see cref="T:System.Web.Http.Controllers.HttpParameterBinding"/>.
            Its primary purpose is to monitor <see cref="M:System.Web.Http.Tracing.Tracers.HttpParameterBindingTracer.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Properties.SRResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionExecutor_UnexpectedTaskInstance">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; on type &apos;{1}&apos; returned a Task instance even though it is not an asynchronous method..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionExecutor_WrappedTaskInstance">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; on type &apos;{1}&apos; returned an instance of &apos;{2}&apos;. Make sure to call Unwrap on the returned value to avoid unobserved faulted Task..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionFilterAttribute_MustSupplyResponseOrException">
            <summary>
              Looks up a localized string similar to After calling {0}.OnActionExecuted, the HttpActionExecutedContext properties Result and Exception were both null. At least one of these values must be non-null. To provide a new response, please set the Result object; to indicate an error, please throw an exception..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionSelector_AmbiguousMatchType">
            <summary>
              Looks up a localized string similar to {0} on type {1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_ActionNameNotFound">
            <summary>
              Looks up a localized string similar to No action was found on the controller &apos;{0}&apos; that matches the name &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_ActionNotFound">
            <summary>
              Looks up a localized string similar to No action was found on the controller &apos;{0}&apos; that matches the request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_AmbiguousMatch">
            <summary>
              Looks up a localized string similar to Multiple actions were found that match the request: {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_HttpMethodNotSupported">
            <summary>
              Looks up a localized string similar to The requested resource does not support http method &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiExplorer_DefaultDocumentation">
            <summary>
              Looks up a localized string similar to Documentation for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.BadRequest">
            <summary>
              Looks up a localized string similar to The request is invalid..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.CannotSupportSingletonInstance">
            <summary>
              Looks up a localized string similar to Cannot reuse an &apos;{0}&apos; instance. &apos;{0}&apos; has to be constructed per incoming message. Check your custom &apos;{1}&apos; and make sure that it will not manufacture the same instance..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Common_PropertyNotFound">
            <summary>
              Looks up a localized string similar to The property {0}.{1} could not be found..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Common_TypeMustDriveFromType">
            <summary>
              Looks up a localized string similar to The type {0} must derive from {1}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ControllerNameNotFound">
            <summary>
              Looks up a localized string similar to No route providing a controller name was found to match request URI &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DataAnnotationsModelValidatorProvider_ConstructorRequirements">
            <summary>
              Looks up a localized string similar to The type {0} must have a public constructor which accepts three parameters of types {1}, {2}, and {3}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements">
            <summary>
              Looks up a localized string similar to The type {0} must have a public constructor which accepts two parameters of types {1} and {2}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate">
            <summary>
              Looks up a localized string similar to Multiple types were found that match the controller named &apos;{0}&apos;. This can happen if the route that services this request (&apos;{1}&apos;) found multiple controllers defined with the same name but differing namespaces, which is not supported.{3}{3}The request for &apos;{0}&apos; has found the following matching controllers:{2}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultControllerFactory_ControllerNameNotFound">
            <summary>
              Looks up a localized string similar to No type was found that matches the controller named &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultControllerFactory_ErrorCreatingController">
            <summary>
              Looks up a localized string similar to An error occurred when trying to create a controller of type &apos;{0}&apos;. Make sure that the controller has a parameterless public constructor..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultServices_InvalidServiceType">
            <summary>
              Looks up a localized string similar to The service type {0} is not supported..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DependencyResolver_BeginScopeReturnsNull">
            <summary>
              Looks up a localized string similar to A dependency resolver of type &apos;{0}&apos; returned an invalid value of null from its BeginScope method. If the container does not have a concept of scope, consider returning a scope that resolves in the root of the container instead..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DependencyResolverNoService">
            <summary>
              Looks up a localized string similar to No service registered for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ErrorOccurred">
            <summary>
              Looks up a localized string similar to An error has occurred..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpActionDescriptor_NoConverterForGenericParamterTypeExists">
            <summary>
              Looks up a localized string similar to No action result converter could be constructed for a generic parameter type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpRequestMessageExtensions_NoConfiguration">
            <summary>
              Looks up a localized string similar to The request does not have an associated configuration object or the provided configuration was null..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpRequestMessageExtensions_NoContentNegotiator">
            <summary>
              Looks up a localized string similar to The provided configuration does not have an instance of the &apos;{0}&apos; service registered..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpRequestMessageExtensions_NoMatchingFormatter">
            <summary>
              Looks up a localized string similar to Could not find a formatter matching the media type &apos;{0}&apos; that can write an instance of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpResponseExceptionMessage">
            <summary>
              Looks up a localized string similar to Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the &apos;Response&apos; property of this exception for details..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpServerDisposed">
            <summary>
              Looks up a localized string similar to The server is no longer available..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.JQuerySyntaxMissingClosingBracket">
            <summary>
              Looks up a localized string similar to The key is invalid JQuery syntax because it is missing a closing bracket.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.MaxHttpCollectionKeyLimitReached">
            <summary>
              Looks up a localized string similar to The number of keys in a NameValueCollection has exceeded the limit of &apos;{0}&apos;. You can adjust it by modifying the MaxHttpCollectionKeys property on the &apos;{1}&apos; class..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.MissingDataMemberIsRequired">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; on type &apos;{1}&apos; is invalid. Value-typed properties marked as [Required] must also be marked with [DataMember(IsRequired=true)] to be recognized as required. Consider attributing the declaring type with [DataContract] and the property with [DataMember(IsRequired=true)]..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.MissingRequiredMember">
            <summary>
              Looks up a localized string similar to The {0} property is required..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderConfig_ValueInvalid">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for {1}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderConfig_ValueRequired">
            <summary>
              Looks up a localized string similar to A value is required..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderProviderCollection_InvalidBinderType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not subclass {1} or implement the interface {2}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelCannotBeNull">
            <summary>
              Looks up a localized string similar to The binding context has a null Model, but this binder requires a non-null model of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelInstanceIsWrong">
            <summary>
              Looks up a localized string similar to The binding context has a Model of type &apos;{0}&apos;, but this binder can only operate on models of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelMetadataCannotBeNull">
            <summary>
              Looks up a localized string similar to The binding context cannot have a null ModelMetadata..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelTypeIsWrong">
            <summary>
              Looks up a localized string similar to The binding context has a ModelType of &apos;{0}&apos;, but this binder can only operate on models of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBindingContext_ModelMetadataMustBeSet">
            <summary>
              Looks up a localized string similar to The ModelMetadata property must be set before accessing this property..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.NoControllerCreated">
            <summary>
              Looks up a localized string similar to No controller was created to handle this request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.NoControllerSelected">
            <summary>
              Looks up a localized string similar to No controller was selected to handle this request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.NoRouteData">
            <summary>
              Looks up a localized string similar to No route data was found for this request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.OptionalBodyParameterNotSupported">
            <summary>
              Looks up a localized string similar to Optional parameter &apos;{0}&apos; is not supported by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParameterBindingCantHaveMultipleBodyParameters">
            <summary>
              Looks up a localized string similar to Can&apos;t bind multiple parameters (&apos;{0}&apos; and &apos;{1}&apos;) to the request&apos;s content..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParameterBindingConflictingAttributes">
            <summary>
              Looks up a localized string similar to Can&apos;t bind parameter &apos;{0}&apos; because it has conflicting attributes on it..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParameterBindingIllegalType">
            <summary>
              Looks up a localized string similar to Can&apos;t bind parameter &apos;{1}&apos;. Must specify a custom model binder to bind parameters of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedActionDescriptor_ParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to The parameters dictionary contains a null entry for parameter &apos;{0}&apos; of non-nullable type &apos;{1}&apos; for method &apos;{2}&apos; in &apos;{3}&apos;. An optional parameter must be a reference type, a nullable type, or be declared as an optional parameter..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedActionDescriptor_ParameterNotInDictionary">
            <summary>
              Looks up a localized string similar to The parameters dictionary does not contain an entry for parameter &apos;{0}&apos; of type &apos;{1}&apos; for method &apos;{2}&apos; in &apos;{3}&apos;. The dictionary must contain an entry for each parameter, including parameters that have null values..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedActionDescriptor_ParameterValueHasWrongType">
            <summary>
              Looks up a localized string similar to The parameters dictionary contains an invalid entry for parameter &apos;{0}&apos; for method &apos;{1}&apos; in &apos;{2}&apos;. The dictionary contains a value of type &apos;{3}&apos;, but the parameter requires a value of type &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedHttpActionDescriptor_CannotCallOpenGenericMethods">
            <summary>
              Looks up a localized string similar to Cannot call action method &apos;{0}&apos; on controller &apos;{1}&apos; because the action method is a generic method..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.RequestNotAuthorized">
            <summary>
              Looks up a localized string similar to Authorization has been denied for this request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ResourceNotFound">
            <summary>
              Looks up a localized string similar to No HTTP resource was found that matches the request URI &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ResponseMessageResultConverter_NullHttpResponseMessage">
            <summary>
              Looks up a localized string similar to A null value was returned where an instance of HttpResponseMessage was expected..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_AddRemoveWithNoKeyNotSupported">
            <summary>
              Looks up a localized string similar to Adding or removing items from a &apos;{0}&apos; is not supported. Please use a key when adding and removing items..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CannotHaveCatchAllInMultiSegment">
            <summary>
              Looks up a localized string similar to A path segment that contains more than one section, such as a literal section or a parameter, cannot contain a catch-all parameter..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CannotHaveConsecutiveParameters">
            <summary>
              Looks up a localized string similar to A path segment cannot contain two consecutive parameters. They must be separated by a &apos;/&apos; or by a literal string..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CannotHaveConsecutiveSeparators">
            <summary>
              Looks up a localized string similar to The route template separator character &apos;/&apos; cannot appear consecutively. It must be separated by either a parameter or a literal value..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CatchAllMustBeLast">
            <summary>
              Looks up a localized string similar to A catch-all parameter can only appear as the last segment of the route template..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_InvalidParameterName">
            <summary>
              Looks up a localized string similar to The route parameter name &apos;{0}&apos; is invalid. Route parameter names must be non-empty and cannot contain these characters: &quot;{{&quot;, &quot;}}&quot;, &quot;/&quot;, &quot;?&quot;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_InvalidRouteTemplate">
            <summary>
              Looks up a localized string similar to The route template cannot start with a &apos;/&apos; or &apos;~&apos; character and it cannot contain a &apos;?&apos; character..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_MismatchedParameter">
            <summary>
              Looks up a localized string similar to There is an incomplete parameter in this path segment: &apos;{0}&apos;. Check that each &apos;{{&apos; character has a matching &apos;}}&apos; character..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_RepeatedParameter">
            <summary>
              Looks up a localized string similar to The route parameter name &apos;{0}&apos; appears more than one time in the route template..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_ValidationMustBeStringOrCustomConstraint">
            <summary>
              Looks up a localized string similar to The constraint entry &apos;{0}&apos; on the route with route template &apos;{1}&apos; must have a string value or be of a type which implements &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.RouteCollection_NameNotFound">
            <summary>
              Looks up a localized string similar to A route named &apos;{0}&apos; could not be found in the route collection..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionFilterMessage">
            <summary>
              Looks up a localized string similar to Action filter for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionInvokeMessage">
            <summary>
              Looks up a localized string similar to Action=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionReturnValue">
            <summary>
              Looks up a localized string similar to Action returned &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionSelectedMessage">
            <summary>
              Looks up a localized string similar to Selected action &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceBeginParameterBind">
            <summary>
              Looks up a localized string similar to Binding parameter &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceCancelledMessage">
            <summary>
              Looks up a localized string similar to Cancelled.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceEndParameterBind">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; bound to the value &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceEndParameterBindNoBind">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; failed to bind..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestFormatterEndMessage">
            <summary>
              Looks up a localized string similar to Will use same &apos;{0}&apos; formatter.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestFormatterEndMessageNew">
            <summary>
              Looks up a localized string similar to Will use new &apos;{0}&apos; formatter.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestFormatterMessage">
            <summary>
              Looks up a localized string similar to Obtaining formatter of type &apos;{0}&apos; for type=&apos;{1}&apos;, mediaType=&apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestNullFormatterEndMessage">
            <summary>
              Looks up a localized string similar to Null formatter.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceInvokingAction">
            <summary>
              Looks up a localized string similar to Invoking action &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceModelStateErrorMessage">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceModelStateInvalidMessage">
            <summary>
              Looks up a localized string similar to Model state is invalid. {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceNegotiateFormatter">
            <summary>
              Looks up a localized string similar to Type=&apos;{0}&apos;, formatters=[{1}].
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceNoneObjectMessage">
            <summary>
              Looks up a localized string similar to none.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceReadFromStreamMessage">
            <summary>
              Looks up a localized string similar to Type=&apos;{0}&apos;, content-type=&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceReadFromStreamValueMessage">
            <summary>
              Looks up a localized string similar to Value read=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceRequestCompleteMessage">
            <summary>
              Looks up a localized string similar to Content-type=&apos;{0}&apos;, content-length={1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceRouteMessage">
            <summary>
              Looks up a localized string similar to Route=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceSelectedFormatter">
            <summary>
              Looks up a localized string similar to Selected formatter=&apos;{0}&apos;, content-type=&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceUnknownMessage">
            <summary>
              Looks up a localized string similar to unknown.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceValidModelState">
            <summary>
              Looks up a localized string similar to Model state is valid. Values: {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceWriteToStreamMessage">
            <summary>
              Looks up a localized string similar to Value=&apos;{0}&apos;, type=&apos;{1}&apos;, content-type=&apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValidatableObjectAdapter_IncompatibleType">
            <summary>
              Looks up a localized string similar to The model object inside the metadata claimed to be compatible with {0}, but was actually {1}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Validation_ValueNotFound">
            <summary>
              Looks up a localized string similar to A value is required but was not present in the request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValidationAttributeOnField">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; on type &apos;{1}&apos; is attributed with one or more validation attributes. Validation attributes on fields are not supported. Consider using a public property for validation instead..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValidationAttributeOnNonPublicProperty">
            <summary>
              Looks up a localized string similar to Non-public property &apos;{0}&apos; on type &apos;{1}&apos; is attributed with one or more validation attributes. Validation attributes on non-public properties are not supported. Consider using a public property for validation instead..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValidModelState">
            <summary>
              Looks up a localized string similar to The model state is valid..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValueProviderFactory_Cannot_Create">
            <summary>
              Looks up a localized string similar to Could not create a &apos;{0}&apos; from &apos;{1}&apos;. Please ensure it derives from &apos;{0}&apos; and has a public parameterless constructor..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValueProviderResult_ConversionThrew">
            <summary>
              Looks up a localized string similar to The parameter conversion from type &apos;{0}&apos; to type &apos;{1}&apos; failed. See the inner exception for more information..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValueProviderResult_NoConverterExists">
            <summary>
              Looks up a localized string similar to The parameter conversion from type &apos;{0}&apos; to type &apos;{1}&apos; failed because no type converter can convert between these types..
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpControllerContext">
            <summary>
            Contains information for a single HTTP operation.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.HttpControllerContext"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
            <summary>
            Gets or sets the controller descriptor.
            </summary>
            <value>
            The controller descriptor.
            </value>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
            <summary>
            Gets or sets the HTTP controller.
            </summary>
            <value>
            The HTTP controller.
            </value>
        </member>
        <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Deserialize the form data to the given type, using model binding.  
            </summary>
            <param name="formData">collection with parsed form url data</param>
            <param name="type">target type to read as</param>
            <param name="modelName">null or empty to read the entire form as a single object. This is common for body data. 
            <param name="requiredMemberSelector">The <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector"/> used to determine required members.</param>
            <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger"/> to log events to.</param>
            Or the name of a model to do a partial binding against the form data. This is common for extracting individual fields.</param>
            <returns>best attempt to bind the object. The best attempt may be null.</returns>
        </member>
        <member name="T:System.Web.Http.Description.ApiParameterSource">
            <summary>
            Describes where the parameter come from.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensions">
            <summary>
            Extensions for adding <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> items to a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Net.Http.HttpRequestMessage"/> whose <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> contains a URL Parameter {ext}
            with the given <paramref name="uriPathExtension"/>.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> item.</param>
            <param name="uriPathExtension">The string of the <see cref="T:System.Uri"/> path extension.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to associate with.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Net.Http.HttpRequestMessage"/> whose <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> contains a URL Parameter {ext}
            with the given <paramref name="uriPathExtension"/>.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> item.</param>
            <param name="uriPathExtension">The string of the <see cref="T:System.Uri"/> path extension.</param>
            <param name="mediaType">The string media type to associate with.</param>
        </member>
        <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
            <summary>
            This class is an <see cref="T:System.Web.Http.ModelBinding.IModelBinder"/> that delegates to one of a collection of
            <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider"/> instances.
            </summary>
            <remarks>
            If no binder is available and the <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/> allows it,
            this class tries to find a binder using an empty prefix.
            </remarks>
        </member>
        <member name="T:System.Net.Http.HttpRequestMessageExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Net.Http.HttpRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpConfiguration"/> for the given request.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Web.Http.HttpConfiguration"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the dependency resolver scope associated with this <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            Services which are retrieved from this scope will be released when the request is
            cleaned up by the framework.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Web.Http.Dependencies.IDependencyScope"/> for the given request.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:System.Threading.SynchronizationContext"/> for the given request or null if not available.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Threading.SynchronizationContext"/> or null.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> or null if not available.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> or null.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for the given request or null if not available.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> or null.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)">
            <summary>
            Helper method for creating an <see cref="T:System.Net.Http.HttpResponseMessage"/> message with a "416 (Requested Range Not Satisfiable)" status code.
            This response can be used in combination with the <see cref="T:System.Net.Http.ByteRangeStreamContent"/> to indicate that the requested range or
            ranges do not overlap with the current resource. The response contains a "Content-Range" header indicating the valid upper and lower
            bounds for requested ranges.
            </summary>
            <param name="request">The request.</param>
            <param name="invalidByteRangeException">An <see cref="T:System.Net.Http.InvalidByteRangeException"/> instance, typically thrown by a 
            <see cref="T:System.Net.Http.ByteRangeStreamContent"/> instance.</param>
            <returns>An 416 (Requested Range Not Satisfiable) error response with a Content-Range header indicating the valid range.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> representing an error 
            with an instance of <see cref="T:System.Net.Http.ObjectContent`1"/> wrapping an <see cref="T:System.Web.Http.HttpError"/> with message <paramref name="message"/>.
            If no formatter is found, this method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of 
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="message">The error message.</param>
            <returns>An error response with error message <paramref name="message"/> and status code <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.String)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> representing an error 
            with an instance of <see cref="T:System.Net.Http.ObjectContent`1"/> wrapping an <see cref="T:System.Web.Http.HttpError"/> with message <paramref name="message"/>
            and message detail <paramref name="messageDetail"/>.If no formatter is found, this method returns a response with 
            status 406 NotAcceptable.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of 
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="message">The error message. This message will always be seen by clients.</param>
            <param name="messageDetail">The error message detail. This message will only be seen by clients if we should include error detail.</param>
            <returns>An error response with error message <paramref name="message"/> and message detail <paramref name="messageDetail"/>
            and status code <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> representing an error 
            with an instance of <see cref="T:System.Net.Http.ObjectContent`1"/> wrapping an <see cref="T:System.Web.Http.HttpError"/> with error message <paramref name="message"/>
            for exception <paramref name="exception"/>. If no formatter is found, this method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
            <returns>An error response for <paramref name="exception"/> with error message <paramref name="message"/>
            and status code <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> representing an error 
            with an instance of <see cref="T:System.Net.Http.ObjectContent`1"/> wrapping an <see cref="T:System.Web.Http.HttpError"/> for exception <paramref name="exception"/>.
            If no formatter is found, this method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="exception">The exception.</param>
            <returns>An error response for <paramref name="exception"/> with status code <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> representing an error 
            with an instance of <see cref="T:System.Net.Http.ObjectContent`1"/> wrapping an <see cref="T:System.Web.Http.HttpError"/> for model state <paramref name="modelState"/>.
            If no formatter is found, this method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="modelState">The model state.</param>
            <returns>An error response for <paramref name="modelState"/> with status code <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> representing an error 
            with an instance of <see cref="T:System.Net.Http.ObjectContent`1"/> wrapping <paramref name="error"/> as the content. If no formatter 
            is found, this method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="error">The error to wrap.</param>
            <returns>An error response wrapping <paramref name="error"/> with status code <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an instance
            of <see cref="T:System.Net.Http.ObjectContent`1"/> as the content if a formatter can be found. If no formatter is found, this
            method returns a response with status 406 NotAcceptable. This forwards the call to
            <see cref="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)"/> with a <c>null</c>
            configuration.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an instance
            of <see cref="T:System.Net.Http.ObjectContent`1"/> as the content if a formatter can be found. If no formatter is found, this
            method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method will use the provided <paramref name="configuration"/> or it will get the 
            <see cref="T:System.Web.Http.HttpConfiguration"/> instance associated with <paramref name="request"/>.
            </remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="configuration">The configuration to use. Can be <c>null</c>.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>   
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)">
            <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an <see cref="T:System.Net.Http.ObjectContent`1"/> instance containing the provided
            <paramref name="value"/>. The given <paramref name="mediaType"/> is used to find an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="mediaType">The media type used to look up an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="request"/> does not have an associated
            <see cref="T:System.Web.Http.HttpConfiguration"/> instance or if the configuration does not have a formatter matching <paramref name="mediaType"/>.</exception>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an <see cref="T:System.Net.Http.ObjectContent`1"/> instance containing the provided
            <paramref name="value"/>. The given <paramref name="mediaType"/> is used to find an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="mediaType">The media type used to look up an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="request"/> does not have an associated
            <see cref="T:System.Web.Http.HttpConfiguration"/> instance or if the configuration does not have a formatter matching <paramref name="mediaType"/>.</exception>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an <see cref="T:System.Net.Http.ObjectContent`1"/> instance containing the provided
            <paramref name="value"/> and the given <paramref name="formatter"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="formatter">The formatter to use.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an <see cref="T:System.Net.Http.ObjectContent`1"/> instance containing the provided
            <paramref name="value"/> and the given <paramref name="formatter"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="formatter">The formatter to use.</param>
            <param name="mediaType">The media type override to set on the response's content. Can be <c>null</c>.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an <see cref="T:System.Net.Http.ObjectContent`1"/> instance containing the provided
            <paramref name="value"/> and the given <paramref name="formatter"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="formatter">The formatter to use.</param>
            <param name="mediaType">The media type override to set on the response's content. Can be <c>null</c>.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
            <summary>
            Adds the given <paramref name="resource"/> to a list of resources that will be disposed by a host once
            the <paramref name="request"/> is disposed.
            </summary>
            <param name="request">The request controlling the lifecycle of <paramref name="resource"/>.</param>
            <param name="resource">The resource to dispose when <paramref name="request"/> is being disposed. Can be <c>null</c>.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
            <summary>
            Disposes of all tracked resources associated with the <paramref name="request"/> which were added via the
            <see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)"/> method.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieves the <see cref="T:System.Guid"/> which has been assigned as the
            correlation id associated with the given <paramref name="request"/>.
            The value will be created and set the first time this method is called.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The <see cref="T:System.Guid"/> associated with that request.</returns>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieves the parsed query string as a collection of key-value pairs.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The query string as a collection of key-value pairs.</returns>
        </member>
        <member name="T:System.Web.Http.HttpError">
            <summary>
            Defines a serializable container for arbitrary error information.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpError"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpError"/> class containing error message <paramref name="message"/>.
            </summary>
            <param name="message">The error message to associate with this instance.</param>
        </member>
        <member name="M:System.Web.Http.HttpError.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpError"/> class for <paramref name="exception"/>.
            </summary>
            <param name="exception">The exception to use for error information.</param>
            <param name="includeErrorDetail"><c>true</c> to include the exception information in the error; <c>false</c> otherwise</param>
        </member>
        <member name="M:System.Web.Http.HttpError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpError"/> class for <paramref name="modelState"/>.
            </summary>
            <param name="modelState">The invalid model state to use for error information.</param>
            <param name="includeErrorDetail"><c>true</c> to include exception messages in the error; <c>false</c> otherwise</param>
        </member>
        <member name="M:System.Web.Http.HttpError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpError"/> class containing error message <paramref name="message"/> 
            and error message detail <paramref name="messageDetail"/>.
            </summary>
            <param name="message">The error message to associate with this instance.</param>
            <param name="messageDetail">The error message detail to associate with this instance.</param>
        </member>
        <member name="M:System.Web.Http.HttpError.GetPropertyValue``1(System.String)">
            <summary>
            Gets a particular property value from this error instance.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="key">The name of the error property.</param>
            <returns>The value of the error property.</returns>
        </member>
        <member name="P:System.Web.Http.HttpError.Message">
            <summary>
            The high-level, user-visible message explaining the cause of the error. Information carried in this field 
            should be considered public in that it will go over the wire regardless of the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. 
            As a result care should be taken not to disclose sensitive information about the server or the application.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpError.ModelState">
            <summary>
            The <see cref="P:System.Web.Http.HttpError.ModelState"/> containing information about the errors that occurred during model binding.
            </summary>
            <remarks>
            The inclusion of <see cref="T:System.Exception"/> information carried in the <see cref="P:System.Web.Http.HttpError.ModelState"/> is
            controlled by the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. All other information in the <see cref="P:System.Web.Http.HttpError.ModelState"/>
            should be considered public in that it will go over the wire. As a result care should be taken not to 
            disclose sensitive information about the server or the application.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpError.MessageDetail">
            <summary>
            A detailed description of the error intended for the developer to understand exactly what failed.
            </summary>
            <remarks>
            The inclusion of this field is controlled by the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. The 
            field is expected to contain information about the server or the application that should not 
            be disclosed broadly.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpError.ExceptionMessage">
            <summary>
            The message of the <see cref="T:System.Exception"/> if available.
            </summary>
            <remarks>
            The inclusion of this field is controlled by the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. The 
            field is expected to contain information about the server or the application that should not 
            be disclosed broadly.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpError.ExceptionType">
            <summary>
            The type of the <see cref="T:System.Exception"/> if available.
            </summary>
            <remarks>
            The inclusion of this field is controlled by the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. The 
            field is expected to contain information about the server or the application that should not 
            be disclosed broadly.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpError.StackTrace">
            <summary>
            The stack trace information associated with this instance if available.
            </summary>
            <remarks>
            The inclusion of this field is controlled by the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. The 
            field is expected to contain information about the server or the application that should not 
            be disclosed broadly.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpError.InnerException">
            <summary>
            The inner <see cref="T:System.Exception"/> associated with this instance if available.
            </summary>
            <remarks>
            The inclusion of this field is controlled by the <see cref="T:System.Web.Http.IncludeErrorDetailPolicy"/>. The 
            field is expected to contain information about the server or the application that should not 
            be disclosed broadly.
            </remarks>
        </member>
        <member name="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)">
            <summary>
            Register that the given parameter type on an Action is to be bound using the model binder.
            </summary>
            <param name="configuration">configuration to be updated.</param>
            <param name="type">parameter type that binder is applied to</param>
            <param name="binder">a model binder</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors``1(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromResult``1(``0)">
            <summary>
            Returns a successful completed task with the given result.  
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Iterate(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Return a task that runs all the tasks inside the iterator sequentially. It stops as soon
            as one of the tasks fails or cancels, or after all the tasks have run succesfully.
            </summary>
            <param name="asyncIterator">collection of tasks to wait on</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="disposeEnumerator">whether or not to dispose the enumerator we get from <paramref name="asyncIterator"/>.
            Only set to <c>false</c> if you can guarantee that <paramref name="asyncIterator"/>'s enumerator does not have any resources it needs to dispose.</param>
            <returns>a task that signals completed when all the incoming tasks are finished.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImpl(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Provides the implementation of the Iterate method.
            Contains special logic to help speed up common cases.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImplIncompleteTask(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Fallback for IterateImpl when the antecedent Task isn't yet complete.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously(System.Action,System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <param name="action">action to run synchronouslyt</param>
            <param name="token">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <typeparam name="TResult">type of result that task will return.</typeparam>
            <param name="func">function to run synchronously and produce result</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Overload of RunSynchronously that avoids a call to Unwrap(). 
            This overload is useful when func() starts doing some synchronous work and then hits IO and 
            needs to create a task to finish the work. 
            </summary>
            <typeparam name="TResult">type of result that Task will return</typeparam>
            <param name="func">function that returns a task</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task, created by running func().</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.SetIfTaskFailed``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Update the completion source if the task failed (cancelled or faulted). No change to completion source if the task succeeded. 
            </summary>
            <typeparam name="TResult">result type of completion source</typeparam>
            <param name="tcs">completion source to update</param>
            <param name="source">task to update from.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task. If the task ran to completion and the result type doesn't match
            the type of the completion source, then a default value will be used. This is useful for converting Task into
            Task{AsyncVoid}, but it can also accidentally be used to introduce data loss (by passing the wrong
            task type), so please execute this method with care.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
    </members>
</doc>
